// ==UserScript==
// @name         AIÊèêÁ§∫ËØçÂ¢ûÂº∫Âô® - È£û‰π¶Áü•ËØÜÂ∫ìÁâà
// @namespace    http://tampermonkey.net/
// @version      1.2.9
// @description  Âú®AIÂØπËØùÁΩëÁ´ô‰∏≠Â¢ûÂº∫Áî®Êà∑ËæìÂÖ•Ôºå‰ΩøÁî®È£û‰π¶Â§öÁª¥Ë°®Ê†º‰Ωú‰∏∫Áü•ËØÜÂ∫ìÂ≠òÂÇ®ÂíåÊ£ÄÁ¥¢ÊñπÊ≥ïËÆ∫„ÄÇv1.2.9: ÁÆÄÂåñ‰ª£Á†ÅÈÄªËæëÔºåÁßªÈô§Â§çÊùÇÈ™åËØÅÔºå‰ºòÂåñÁî®Êà∑‰ΩìÈ™å
// @author       AI Assistant
// @license      MIT
// @match        https://chat.deepseek.com/*
// @match        https://kimi.moonshot.cn/*
// @match        https://www.kimi.com/*
// @match        https://kimi.com/*
// @match        https://www.doubao.com/chat/*
// @match        http://*/*
// @match        https://*/*
// @grant        GM_xmlhttpRequest
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_addStyle
// @grant        GM_registerMenuCommand
// @connect      open.feishu.cn
// @connect      api.moonshot.cn
// @connect      api.deepseek.com
// @connect      *
// @require      https://cdn.jsdelivr.net/npm/sweetalert2@11
// ==/UserScript==

(function() {
    'use strict';

    // ==================== ÈÖçÁΩÆÂíåÂ∏∏Èáè ====================

    // ÁΩëÁ´ôÁ±ªÂûãÊûö‰∏æ
    const SiteType = {
        DEEPSEEK: 'deepseek',
        KIMI: 'kimi',
        DOUBAO: 'doubao',
        UNKNOWN: 'unknown'
    };

    // ÊåâÈíÆÁä∂ÊÄÅÊûö‰∏æ
    const ButtonState = {
        NORMAL: 'normal',
        LOADING: 'loading',
        SUCCESS: 'success',
        ERROR: 'error'
    };

    // È£û‰π¶Â§öÁª¥Ë°®Ê†ºÈÖçÁΩÆ
    const FEISHU_CONFIG = {
        API_URL: 'https://open.feishu.cn/open-apis',
        // Áî®Êà∑ÈúÄË¶ÅÈÖçÁΩÆÁöÑÂ≠óÊÆµ
        get APP_ID() { return GM_getValue('feishu_app_id', ''); },
        get APP_SECRET() { return GM_getValue('feishu_app_secret', ''); },
        get BASE_ID() { return GM_getValue('feishu_base_id', ''); },
        get TABLE_ID() { return GM_getValue('feishu_table_id', ''); }
    };

    // AIÊ®°ÂûãÈÖçÁΩÆ
    const AI_CONFIG = {
        get MODEL_NAME() { return GM_getValue('ai_model_name', 'moonshot-v1-8k'); },
        get BASE_URL() { return GM_getValue('ai_base_url', 'https://api.moonshot.cn/v1'); },
        get API_KEY() { return GM_getValue('ai_api_key', ''); }
    };

    // ÁΩëÁ´ôÈÖçÁΩÆ
    const SITE_CONFIGS = {
        [SiteType.DEEPSEEK]: {
            type: SiteType.DEEPSEEK,
            name: 'DeepSeek',
            inputSelector: '#chat-input, textarea[placeholder*="ËæìÂÖ•"], textarea[placeholder*="ÈóÆÈ¢ò"], .chat-input textarea, textarea',
            inputType: 'textarea',
            buttonContainerSelector: '.ec4f5d61, .chat-input-container, .input-container, .toolbar, .chat-toolbar, [class*="toolbar"], [class*="input-container"], [class*="container"]',
            sendButtonSelector: '.bcc55ca1, [data-testid*="send"], button[type="submit"]',
            isEnabled: true
        },
        [SiteType.KIMI]: {
            type: SiteType.KIMI,
            name: 'Kimi',
            inputSelector: '.chat-input-editor',
            inputType: 'contenteditable',
            buttonContainerSelector: '.left-area',
            sendButtonSelector: '.send-button-container',
            isEnabled: true
        },
        [SiteType.DOUBAO]: {
            type: SiteType.DOUBAO,
            name: 'Ë±ÜÂåÖ',
            inputSelector: '[data-testid="chat_input_input"]',
            inputType: 'textarea',
            buttonContainerSelector: '.left-tools-wrapper-INTHKl',
            sendButtonSelector: '[data-testid="chat_input_send_button"]',
            isEnabled: true
        }
    };

    // ÂÖ®Â±ÄÂèòÈáè
    let currentSiteType = SiteType.UNKNOWN;
    let enhanceButton = null;
    let inputHandler = null;
    let accessTokenCache = { token: null, expireTime: 0 };
    let isInitialized = false;

    // ==================== Â∑•ÂÖ∑ÂáΩÊï∞ ====================

    // Ê£ÄÊµãÂΩìÂâçÁΩëÁ´ôÁ±ªÂûã
    function detectSiteType() {
        const hostname = window.location.hostname;
        console.log('üîç Ê£ÄÊµãÁΩëÁ´ôÁ±ªÂûã - ÂΩìÂâçÂüüÂêç:', hostname);
        console.log('üîç Ê£ÄÊµãÁΩëÁ´ôÁ±ªÂûã - ÂΩìÂâçÂÆåÊï¥URL:', window.location.href);

        if (hostname.includes('deepseek.com')) {
            console.log('‚úÖ Ê£ÄÊµãÂà∞DeepSeekÁΩëÁ´ô');
            return SiteType.DEEPSEEK;
        } else if (hostname.includes('moonshot.cn') || hostname.includes('kimi.com')) {
            console.log('‚úÖ Ê£ÄÊµãÂà∞KimiÁΩëÁ´ô');
            return SiteType.KIMI;
        } else if (hostname.includes('doubao.com')) {
            console.log('‚úÖ Ê£ÄÊµãÂà∞Ë±ÜÂåÖÁΩëÁ´ô');
            return SiteType.DOUBAO;
        }

        console.log('‚ùå Êú™ËØÜÂà´ÁöÑÁΩëÁ´ôÁ±ªÂûã');
        return SiteType.UNKNOWN;
    }

    // Á≠âÂæÖÂÖÉÁ¥†Âá∫Áé∞
    function waitForElement(selector, timeout = 10000) {
        return new Promise((resolve) => {
            const element = document.querySelector(selector);
            if (element) {
                resolve(element);
                return;
            }

            const observer = new MutationObserver(() => {
                const element = document.querySelector(selector);
                if (element) {
                    observer.disconnect();
                    resolve(element);
                }
            });

            observer.observe(document.body, {
                childList: true,
                subtree: true
            });

            setTimeout(() => {
                observer.disconnect();
                resolve(null);
            }, timeout);
        });
    }

    // Âà§Êñ≠ÊòØÂê¶‰∏∫ËÅäÂ§©È°µÈù¢
    function isChatPage() {
        switch (currentSiteType) {
            case SiteType.DEEPSEEK:
                // DeepSeekÁΩëÁ´ôÁöÑÊâÄÊúâÈ°µÈù¢ÈÉΩÂèØËÉΩÈúÄË¶ÅÂ¢ûÂº∫ÂäüËÉΩÔºå‰∏çÈôêÂà∂ÁâπÂÆöË∑ØÂæÑ
                return true;
            case SiteType.KIMI:
                return true;
            case SiteType.DOUBAO:
                return window.location.pathname === '/' || window.location.pathname.includes('/chat');
            default:
                return false;
        }
    }

    // Ê∑ªÂä†Ê†∑Âºè
    function addStyles() {
        GM_addStyle(`
            .prompt-enhancer-button {
                display: inline-flex;
                align-items: center;
                gap: 6px;
                padding: 8px 12px;
                border: 1px solid rgba(0, 0, 0, 0.12);
                border-radius: 6px;
                background: #fff;
                color: #4c4c4c;
                font-size: 14px;
                cursor: pointer;
                transition: all 0.2s ease;
                white-space: nowrap;
                margin-right: 8px;
            }

            .prompt-enhancer-button:hover {
                background: #f5f5f5;
                border-color: rgba(0, 0, 0, 0.2);
            }

            .prompt-enhancer-button.pe-loading {
                opacity: 0.7;
                cursor: not-allowed;
            }

            .prompt-enhancer-button.pe-success {
                background: #e8f5e8;
                border-color: #4caf50;
                color: #2e7d32;
            }

            .prompt-enhancer-button.pe-error {
                background: #ffebee;
                border-color: #f44336;
                color: #c62828;
            }

            .pe-tooltip {
                position: absolute;
                top: -40px;
                left: 50%;
                transform: translateX(-50%);
                background: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 6px 12px;
                border-radius: 4px;
                font-size: 12px;
                white-space: nowrap;
                z-index: 10000;
                pointer-events: none;
            }

            .pe-config-panel {
                position: fixed;
                top: 20px;
                right: 20px;
                width: 450px;
                max-width: 90vw;
                max-height: 90vh;
                background: white;
                border: 1px solid #ddd;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                z-index: 10000;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                display: flex;
                flex-direction: column;
            }

            .pe-config-header {
                padding: 16px;
                border-bottom: 1px solid #eee;
                display: flex;
                justify-content: space-between;
                align-items: center;
                background: #f8f9fa;
                border-radius: 8px 8px 0 0;
                flex-shrink: 0;
            }

            .pe-config-content {
                padding: 16px;
                overflow-y: auto;
                flex: 1;
                min-height: 0;
            }

            .pe-config-section {
                margin-bottom: 20px;
            }

            .pe-config-section h3 {
                margin: 0 0 12px 0;
                font-size: 16px;
                color: #333;
            }

            .pe-form-group {
                margin-bottom: 12px;
            }

            .pe-form-group label {
                display: block;
                margin-bottom: 4px;
                font-size: 14px;
                color: #555;
            }

            .pe-form-group input {
                width: 100%;
                padding: 8px 12px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
                box-sizing: border-box;
            }

            .pe-button {
                padding: 8px 16px;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-size: 14px;
                margin-right: 8px;
            }

            .pe-button-primary {
                background: #007bff;
                color: white;
            }

            .pe-button-secondary {
                background: #6c757d;
                color: white;
            }

            .pe-close-btn {
                background: none;
                border: none;
                font-size: 18px;
                cursor: pointer;
                color: #666;
            }

            /* Âè≥‰æßÊÇ¨ÊµÆÂ¢ûÂº∫Á™óÊ†∑Âºè */
            .pe-floating-enhancer {
                position: fixed;
                top: 50%;
                right: 20px;
                transform: translateY(-50%);
                width: 60px;
                height: 60px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                border-radius: 50%;
                box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
                cursor: pointer;
                z-index: 9999;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-size: 24px;
                transition: all 0.3s ease;
                user-select: none;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            }

            .pe-floating-enhancer:hover {
                transform: translateY(-50%) scale(1.1);
                box-shadow: 0 6px 25px rgba(102, 126, 234, 0.6);
            }

            .pe-floating-enhancer.pe-loading {
                animation: pe-spin 1s linear infinite;
            }

            .pe-floating-enhancer.pe-success {
                background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
            }

            .pe-floating-enhancer.pe-error {
                background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);
            }

            @keyframes pe-spin {
                0% { transform: translateY(-50%) rotate(0deg); }
                100% { transform: translateY(-50%) rotate(360deg); }
            }

            .pe-floating-tooltip {
                position: absolute;
                right: 70px;
                top: 50%;
                transform: translateY(-50%);
                background: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 8px 12px;
                border-radius: 6px;
                font-size: 12px;
                white-space: nowrap;
                pointer-events: none;
                opacity: 0;
                transition: opacity 0.3s ease;
            }

            .pe-floating-enhancer:hover .pe-floating-tooltip {
                opacity: 1;
            }
        `);
    }

    // ==================== È£û‰π¶APIÁõ∏ÂÖ≥ ====================

    // ‰ªéÈ£û‰π¶Ë°®Ê†ºURL‰∏≠ÊèêÂèñBase IDÂíåTable ID
    function parseFeishuUrl(url) {
        if (!url || !url.trim()) {
            throw new Error('URL‰∏çËÉΩ‰∏∫Á©∫');
        }

        // ÂåπÈÖçBase ID (ÊîØÊåÅÂ§öÁßçURLÊ†ºÂºè)
        const baseIdMatch = url.match(/\/(?:base|sheets)\/([^\/\?]+)/);
        // ÂåπÈÖçTable ID
        const tableIdMatch = url.match(/[?&]table=([^&]+)/);

        if (!baseIdMatch) {
            throw new Error('Êó†Ê≥ï‰ªéURL‰∏≠Ëß£ÊûêBase IDÔºåËØ∑Ê£ÄÊü•URLÊ†ºÂºè');
        }

        if (!tableIdMatch) {
            throw new Error('Êó†Ê≥ï‰ªéURL‰∏≠Ëß£ÊûêTable IDÔºåËØ∑Á°Æ‰øùURLÂåÖÂê´tableÂèÇÊï∞');
        }

        return {
            baseId: baseIdMatch[1],
            tableId: tableIdMatch[1]
        };
    }

    // Ëé∑ÂèñÈ£û‰π¶ËÆøÈóÆ‰ª§Áâå
    function getFeishuAccessToken() {
        return new Promise((resolve, reject) => {
            // Ê£ÄÊü•ÁºìÂ≠ò
            const now = Date.now();
            if (accessTokenCache.token && now < accessTokenCache.expireTime) {
                resolve(accessTokenCache.token);
                return;
            }

            console.log('Ê≠£Âú®Ëé∑ÂèñÈ£û‰π¶ËÆøÈóÆ‰ª§Áâå...');
            console.log('È£û‰π¶ÈÖçÁΩÆ:', {
                APP_ID: FEISHU_CONFIG.APP_ID ? 'Â∑≤ÈÖçÁΩÆ' : 'Êú™ÈÖçÁΩÆ',
                APP_SECRET: FEISHU_CONFIG.APP_SECRET ? 'Â∑≤ÈÖçÁΩÆ' : 'Êú™ÈÖçÁΩÆ',
                BASE_ID: FEISHU_CONFIG.BASE_ID ? 'Â∑≤ÈÖçÁΩÆ' : 'Êú™ÈÖçÁΩÆ',
                TABLE_ID: FEISHU_CONFIG.TABLE_ID ? 'Â∑≤ÈÖçÁΩÆ' : 'Êú™ÈÖçÁΩÆ'
            });

            GM_xmlhttpRequest({
                method: 'POST',
                url: `${FEISHU_CONFIG.API_URL}/auth/v3/tenant_access_token/internal`,
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                timeout: 15000, // 15ÁßíË∂ÖÊó∂
                data: JSON.stringify({
                    app_id: FEISHU_CONFIG.APP_ID,
                    app_secret: FEISHU_CONFIG.APP_SECRET
                }),
                onload: function(response) {
                    console.log('È£û‰π¶‰ª§ÁâåÂìçÂ∫îÁä∂ÊÄÅ:', response.status);
                    console.log('È£û‰π¶‰ª§ÁâåÂìçÂ∫îÂÜÖÂÆπ:', response.responseText);
                    try {
                        const data = JSON.parse(response.responseText);
                        if (data.code === 0 && data.tenant_access_token) {
                            // ÁºìÂ≠ò‰ª§ÁâåÔºåÊúâÊïàÊúüËÆæ‰∏∫90ÂàÜÈíü
                            accessTokenCache.token = data.tenant_access_token;
                            accessTokenCache.expireTime = Date.now() + (90 * 60 * 1000);
                            console.log('È£û‰π¶ËÆøÈóÆ‰ª§ÁâåËé∑ÂèñÊàêÂäü');
                            resolve(data.tenant_access_token);
                        } else {
                            console.error('È£û‰π¶APIÈîôËØØ:', data);
                            let errorMsg = 'Ëé∑ÂèñÈ£û‰π¶ËÆøÈóÆ‰ª§ÁâåÂ§±Ë¥•';
                            if (data.msg) {
                                errorMsg += ': ' + data.msg;
                            }
                            if (data.msg && data.msg.includes('app secret invalid')) {
                                errorMsg = 'È£û‰π¶App SecretÊó†ÊïàÔºåËØ∑Ê£ÄÊü•ÈÖçÁΩÆ';
                            }
                            reject(new Error(errorMsg));
                        }
                    } catch (e) {
                        console.error('Ëß£ÊûêÈ£û‰π¶ÂìçÂ∫îÂ§±Ë¥•:', e, 'ÂéüÂßãÂìçÂ∫î:', response.responseText);
                        reject(new Error('ÂìçÂ∫îËß£ÊûêÂ§±Ë¥•: ' + e.message));
                    }
                },
                onerror: function(error) {
                    console.error('È£û‰π¶ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•:', error);
                    reject(new Error('ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•'));
                },
                ontimeout: function() {
                    console.error('È£û‰π¶ËØ∑Ê±ÇË∂ÖÊó∂');
                    reject(new Error('Ëé∑ÂèñËÆøÈóÆ‰ª§ÁâåË∂ÖÊó∂'));
                }
            });
        });
    }

    // ÂàóÂá∫Â§öÁª¥Ë°®Ê†ºÁöÑÊï∞ÊçÆË°®
    function listFeishuTables(appToken, accessToken) {
        return new Promise((resolve, reject) => {
            console.log('Ê≠£Âú®Ëé∑ÂèñÊï∞ÊçÆË°®ÂàóË°®...');

            GM_xmlhttpRequest({
                method: 'GET',
                url: `${FEISHU_CONFIG.API_URL}/bitable/v1/apps/${appToken}/tables`,
                headers: {
                    'Authorization': `Bearer ${accessToken}`
                },
                onload: function(response) {
                    console.log('Ëé∑ÂèñÊï∞ÊçÆË°®ÂàóË°®ÂìçÂ∫îÁä∂ÊÄÅ:', response.status);
                    console.log('Ëé∑ÂèñÊï∞ÊçÆË°®ÂàóË°®ÂìçÂ∫îÂÜÖÂÆπ:', response.responseText);
                    try {
                        const data = JSON.parse(response.responseText);
                        if (data.code === 0) {
                            const tables = data.data.items || [];
                            console.log(`Ëé∑ÂèñÂà∞ ${tables.length} ‰∏™Êï∞ÊçÆË°®`);
                            resolve(tables);
                        } else {
                            console.error('Ëé∑ÂèñÊï∞ÊçÆË°®ÂàóË°®APIÈîôËØØ:', data);
                            reject(new Error(data.msg || 'Ëé∑ÂèñÊï∞ÊçÆË°®ÂàóË°®Â§±Ë¥•'));
                        }
                    } catch (e) {
                        console.error('Ëß£ÊûêËé∑ÂèñÊï∞ÊçÆË°®ÂàóË°®ÂìçÂ∫îÂ§±Ë¥•:', e, 'ÂéüÂßãÂìçÂ∫î:', response.responseText);
                        reject(new Error('ÂìçÂ∫îËß£ÊûêÂ§±Ë¥•: ' + e.message));
                    }
                },
                onerror: function(error) {
                    console.error('Ëé∑ÂèñÊï∞ÊçÆË°®ÂàóË°®ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•:', error);
                    reject(new Error('ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•'));
                }
            });
        });
    }

    // Êü•ËØ¢Â§öÁª¥Ë°®Ê†ºËÆ∞ÂΩïÔºàÊ†áÂáÜÂõõÊ≠•ÊµÅÁ®ãÔºâ
    function queryFeishuRecords(appToken, tableId, accessToken, options = {}, retryCount = 0) {
        return new Promise((resolve, reject) => {
            console.log('Ê≠£Âú®Êü•ËØ¢Â§öÁª¥Ë°®Ê†ºËÆ∞ÂΩï...');

            const {
                pageSize = 100,
                fieldNames = null,
                filter = null,
                sort = null
            } = options;

            const params = new URLSearchParams();
            if (pageSize) params.append('page_size', pageSize.toString());
            if (fieldNames && fieldNames.length > 0) {
                fieldNames.forEach(name => params.append('field_names', name));
            }

            let url = `${FEISHU_CONFIG.API_URL}/bitable/v1/apps/${appToken}/tables/${tableId}/records`;
            if (params.toString()) {
                url += '?' + params.toString();
            }

            const requestData = {};
            if (filter) requestData.filter = filter;
            if (sort) requestData.sort = sort;

            const requestOptions = {
                method: 'GET',
                url: url,
                headers: {
                    'Authorization': `Bearer ${accessToken}`,
                    'Content-Type': 'application/json; charset=utf-8'
                },
                timeout: 30000 // Â¢ûÂä†Ë∂ÖÊó∂Êó∂Èó¥
            };

            // Â¶ÇÊûúÊúâfilterÊàñsortÔºå‰ΩøÁî®POSTÊñπÊ≥ï
            if (filter || sort) {
                requestOptions.method = 'POST';
                requestOptions.url = `${FEISHU_CONFIG.API_URL}/bitable/v1/apps/${appToken}/tables/${tableId}/records/search`;
                requestOptions.data = JSON.stringify(requestData);
            }

            GM_xmlhttpRequest({
                ...requestOptions,
                onload: function(response) {
                    console.log('Êü•ËØ¢ËÆ∞ÂΩïÂìçÂ∫îÁä∂ÊÄÅ:', response.status);

                    // Ê£ÄÊü•ÂìçÂ∫îÊòØÂê¶ÂÆåÊï¥
                    if (!response.responseText || response.responseText.trim() === '') {
                        console.warn('Êü•ËØ¢ËÆ∞ÂΩïËé∑ÂèñÂà∞Á©∫ÂìçÂ∫îÔºåÂ∞ùËØïÈáçËØï...');
                        if (retryCount < 3) {
                            setTimeout(() => {
                                queryFeishuRecords(appToken, tableId, accessToken, options, retryCount + 1)
                                    .then(resolve)
                                    .catch(reject);
                            }, 1000 * (retryCount + 1));
                            return;
                        } else {
                            reject(new Error('Êü•ËØ¢ËÆ∞ÂΩïÂ§±Ë¥•ÔºöÂìçÂ∫î‰∏∫Á©∫'));
                            return;
                        }
                    }

                    // Ê£ÄÊü•ÂìçÂ∫îÊòØÂê¶Ë¢´Êà™Êñ≠
                    const responseText = response.responseText.trim();
                    if (!responseText.endsWith('}') && !responseText.endsWith(']')) {
                        console.warn('Êü•ËØ¢ËÆ∞ÂΩïÂìçÂ∫îÂèØËÉΩË¢´Êà™Êñ≠ÔºåÂ∞ùËØïÈáçËØï...', 'ÂìçÂ∫îÈïøÂ∫¶:', responseText.length);
                        if (retryCount < 2) { // Êü•ËØ¢ËÆ∞ÂΩïÈáçËØïÊ¨°Êï∞Á®çÂ∞ë‰∏Ä‰∫õ
                            setTimeout(() => {
                                queryFeishuRecords(appToken, tableId, accessToken, options, retryCount + 1)
                                    .then(resolve)
                                    .catch(reject);
                            }, 1500 * (retryCount + 1));
                            return;
                        }
                    }

                    console.log('Êü•ËØ¢ËÆ∞ÂΩïÂìçÂ∫îÂÜÖÂÆπÈïøÂ∫¶:', responseText.length);
                    console.log('Êü•ËØ¢ËÆ∞ÂΩïÂìçÂ∫îÂÜÖÂÆπ:', responseText.substring(0, 300) + (responseText.length > 300 ? '...' : ''));

                    try {
                        const data = JSON.parse(responseText);
                        if (data.code === 0) {
                            const records = data.data.items || [];
                            console.log(`Êü•ËØ¢Âà∞ ${records.length} Êù°ËÆ∞ÂΩï`);
                            resolve({
                                records: records,
                                hasMore: data.data.has_more || false,
                                pageToken: data.data.page_token || null,
                                total: data.data.total || records.length
                            });
                        } else {
                            console.error('Êü•ËØ¢ËÆ∞ÂΩïAPIÈîôËØØ:', data);
                            let errorMsg = 'Êü•ËØ¢ËÆ∞ÂΩïÂ§±Ë¥•';
                            if (data.msg) {
                                errorMsg += ': ' + data.msg;
                            }
                            if (response.status === 403 || data.msg?.includes('Forbidden')) {
                                errorMsg = 'È£û‰π¶Â∫îÁî®ÊùÉÈôê‰∏çË∂≥ÔºåËØ∑Ê£ÄÊü•Â∫îÁî®ÊùÉÈôêÈÖçÁΩÆÔºö\n1. Á°Æ‰øùÂ∫îÁî®Êúâ"Êü•Áúã„ÄÅËØÑËÆ∫„ÄÅÁºñËæëÂíåÁÆ°ÁêÜÂ§öÁª¥Ë°®Ê†º"ÊùÉÈôê\n2. Á°Æ‰øùÂ∫îÁî®Â∑≤ÂèëÂ∏ÉÂπ∂Ëé∑ÂæóÁÆ°ÁêÜÂëòÂÆ°Êâπ\n3. Ê£ÄÊü•Base IDÂíåTable IDÊòØÂê¶Ê≠£Á°Æ';
                            }
                            reject(new Error(errorMsg));
                        }
                    } catch (e) {
                        console.error('Ëß£ÊûêÊü•ËØ¢ËÆ∞ÂΩïÂìçÂ∫îÂ§±Ë¥•:', e);
                        console.error('ÂéüÂßãÂìçÂ∫îÈïøÂ∫¶:', responseText.length);
                        console.error('ÂéüÂßãÂìçÂ∫îÂâç300Â≠óÁ¨¶:', responseText.substring(0, 300));

                        // Â¶ÇÊûúÊòØJSONËß£ÊûêÈîôËØØ‰∏îËøòÊúâÈáçËØïÊ¨°Êï∞ÔºåÂ∞ùËØïÈáçËØï
                        if (retryCount < 2) {
                            console.log(`Êü•ËØ¢ËÆ∞ÂΩïJSONËß£ÊûêÂ§±Ë¥•ÔºåËøõË°åÁ¨¨${retryCount + 1}Ê¨°ÈáçËØï...`);
                            setTimeout(() => {
                                queryFeishuRecords(appToken, tableId, accessToken, options, retryCount + 1)
                                    .then(resolve)
                                    .catch(reject);
                            }, 2000 * (retryCount + 1));
                            return;
                        }

                        reject(new Error('ÂìçÂ∫îËß£ÊûêÂ§±Ë¥•: ' + e.message));
                    }
                },
                onerror: function(error) {
                    console.error('Êü•ËØ¢ËÆ∞ÂΩïÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•:', error);
                    if (retryCount < 2) {
                        console.log(`Êü•ËØ¢ËÆ∞ÂΩïÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•ÔºåËøõË°åÁ¨¨${retryCount + 1}Ê¨°ÈáçËØï...`);
                        setTimeout(() => {
                            queryFeishuRecords(appToken, tableId, accessToken, options, retryCount + 1)
                                .then(resolve)
                                .catch(reject);
                        }, 2000 * (retryCount + 1));
                        return;
                    }
                    reject(new Error('ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•'));
                },
                ontimeout: function() {
                    console.error('Êü•ËØ¢ËÆ∞ÂΩïËØ∑Ê±ÇË∂ÖÊó∂');
                    if (retryCount < 2) {
                        console.log(`Êü•ËØ¢ËÆ∞ÂΩïËØ∑Ê±ÇË∂ÖÊó∂ÔºåËøõË°åÁ¨¨${retryCount + 1}Ê¨°ÈáçËØï...`);
                        setTimeout(() => {
                            queryFeishuRecords(appToken, tableId, accessToken, options, retryCount + 1)
                                .then(resolve)
                                .catch(reject);
                        }, 3000 * (retryCount + 1));
                        return;
                    }
                    reject(new Error('ËØ∑Ê±ÇË∂ÖÊó∂'));
                }
            });
        });
    }

    // ‰ªéÈ£û‰π¶Áü•ËØÜÂ∫ìÊ£ÄÁ¥¢ÊñπÊ≥ïËÆ∫ÔºàÊîπËøõÁâàÔºå‰ΩøÁî®Ê†áÂáÜÂõõÊ≠•ÊµÅÁ®ãÔºâ
    function retrieveFromFeishu(query, topK = 3) {
        return new Promise(async (resolve, reject) => {
            try {
                console.log('ÂºÄÂßãÊ†áÂáÜÂõõÊ≠•ÊµÅÁ®ãÊ£ÄÁ¥¢È£û‰π¶Êï∞ÊçÆ...');

                // Ê≠•È™§‰∏ÄÔºöËé∑ÂèñËÆøÈóÆ‰ª§Áâå
                const accessToken = await getFeishuAccessToken();
                console.log('‚úì Ê≠•È™§‰∏ÄÔºöËÆøÈóÆ‰ª§ÁâåËé∑ÂèñÊàêÂäü');

                // Ê≠•È™§‰∫åÔºöËé∑ÂèñÊï∞ÊçÆË°®‰ø°ÊÅØÔºàÈ™åËØÅtable_idÊòØÂê¶Â≠òÂú®Ôºâ
                const appToken = FEISHU_CONFIG.BASE_ID;
                const targetTableId = FEISHU_CONFIG.TABLE_ID;

                try {
                    const tables = await listFeishuTables(appToken, accessToken);
                    const targetTable = tables.find(table => table.table_id === targetTableId);
                    if (!targetTable) {
                        throw new Error(`Êú™ÊâæÂà∞ÊåáÂÆöÁöÑÊï∞ÊçÆË°® ID: ${targetTableId}`);
                    }
                    console.log(`‚úì Ê≠•È™§‰∫åÔºöÊâæÂà∞ÁõÆÊ†áÊï∞ÊçÆË°® "${targetTable.name}"`);
                } catch (tableError) {
                    console.warn('Ëé∑ÂèñÊï∞ÊçÆË°®ÂàóË°®Â§±Ë¥•ÔºåÁªßÁª≠‰ΩøÁî®ÈÖçÁΩÆÁöÑTable ID:', tableError.message);
                }

                // Ê≠•È™§‰∏âÔºöËé∑ÂèñÂ≠óÊÆµ‰ø°ÊÅØ
                let fieldInfo = {};
                let availableFieldNames = [];
                try {
                    const fields = await getFeishuFields(appToken, targetTableId, accessToken);
                    fields.forEach(field => {
                        fieldInfo[field.field_name] = {
                            field_id: field.field_id,
                            type: field.type
                        };
                        availableFieldNames.push(field.field_name);
                    });
                    console.log(`‚úì Ê≠•È™§‰∏âÔºöËé∑ÂèñÂà∞ ${fields.length} ‰∏™Â≠óÊÆµ‰ø°ÊÅØ`);
                    console.log('ÂèØÁî®Â≠óÊÆµÂêçÁß∞:', availableFieldNames);

                    // Ê£ÄÊü•ÂøÖÈúÄÂ≠óÊÆµÊòØÂê¶Â≠òÂú®
                    const requiredFields = ['Ê†áÈ¢ò', 'ÂÜÖÂÆπ', 'ÂÖ≥ÈîÆËØç', 'Âä©Êâã'];
                    const missingFields = requiredFields.filter(field => !availableFieldNames.includes(field));
                    if (missingFields.length > 0) {
                        console.warn('Áº∫Â∞ëÂøÖÈúÄÂ≠óÊÆµ:', missingFields);
                        console.log('Â∞Ü‰ΩøÁî®ÂèØÁî®Â≠óÊÆµËøõË°åÊü•ËØ¢');
                    }
                } catch (fieldError) {
                    console.warn('Ëé∑ÂèñÂ≠óÊÆµ‰ø°ÊÅØÂ§±Ë¥•Ôºå‰ΩøÁî®Â≠óÊÆµÂêçÁß∞Êü•ËØ¢:', fieldError.message);
                    // Â≠óÊÆµ‰ø°ÊÅØËé∑ÂèñÂ§±Ë¥•‰∏çÂΩ±ÂìçÂêéÁª≠Êü•ËØ¢ÔºåÁªßÁª≠ÊâßË°å
                    availableFieldNames = ['Ê†áÈ¢ò', 'ÂÜÖÂÆπ', 'ÂÖ≥ÈîÆËØç', 'Âä©Êâã']; // ‰ΩøÁî®ÈªòËÆ§Â≠óÊÆµÂêç
                }

                // ËæÖÂä©ÂáΩÊï∞ÔºöÊô∫ËÉΩÊèêÂèñÊêúÁ¥¢ÂÖ≥ÈîÆËØç
                const extractSearchKeywords = (query) => {
                    const keywords = [];

                    // Ê∑ªÂä†ÂéüÂßãÊü•ËØ¢
                    keywords.push(query.trim());

                    // ‰∏≠ÊñáÂàÜËØçÔºàÁÆÄÂçïÂÆûÁé∞Ôºâ
                    const chineseWords = query.match(/[\u4e00-\u9fff]+/g) || [];
                    chineseWords.forEach(word => {
                        if (word.length >= 2) {
                            keywords.push(word);
                            // Ê∑ªÂä†Â≠êËØç
                            for (let i = 0; i <= word.length - 2; i++) {
                                for (let j = i + 2; j <= word.length; j++) {
                                    keywords.push(word.substring(i, j));
                                }
                            }
                        }
                    });

                    // Ëã±ÊñáÂçïËØçÂàÜÂâ≤
                    const englishWords = query.match(/[a-zA-Z]+/g) || [];
                    englishWords.forEach(word => {
                        if (word.length >= 2) {
                            keywords.push(word.toLowerCase());
                        }
                    });

                    // ÂéªÈáçÂπ∂ÊåâÈïøÂ∫¶ÊéíÂ∫èÔºàÈïøÁöÑÂú®ÂâçÔºâ
                    return [...new Set(keywords)].sort((a, b) => b.length - a.length);
                };

                // ËæÖÂä©ÂáΩÊï∞ÔºöÂÆâÂÖ®Âú∞ÊûÑÂª∫Êü•ËØ¢Êù°‰ª∂ÔºåÂè™‰ΩøÁî®Â≠òÂú®ÁöÑÂ≠óÊÆµ
                const buildSafeQueryConditions = (searchFields, searchTerms) => {
                    const conditions = [];
                    searchFields.forEach(fieldName => {
                        if (availableFieldNames.includes(fieldName)) {
                            searchTerms.forEach(term => {
                                conditions.push({
                                    field_name: fieldName,
                                    operator: "contains",
                                    value: [term]
                                });
                            });
                        } else {
                            console.warn(`Â≠óÊÆµ "${fieldName}" ‰∏çÂ≠òÂú®ÔºåË∑≥ËøáÊ≠§Â≠óÊÆµÁöÑÊü•ËØ¢Êù°‰ª∂`);
                        }
                    });
                    return conditions;
                };

                // ËæÖÂä©ÂáΩÊï∞ÔºöÂÆâÂÖ®ÊèêÂèñÂ≠óÊÆµÊñáÊú¨ÂÄº
                const extractFieldText = (fieldValue) => {
                    if (!fieldValue) return '';
                    if (typeof fieldValue === 'string') return fieldValue;
                    if (Array.isArray(fieldValue)) {
                        return fieldValue.map(item => {
                            if (typeof item === 'string') return item;
                            if (item && typeof item === 'object' && item.text) return item.text;
                            return String(item || '');
                        }).join(' ');
                    }
                    if (typeof fieldValue === 'object' && fieldValue.text) {
                        return fieldValue.text;
                    }
                    return String(fieldValue);
                };

                // ËæÖÂä©ÂáΩÊï∞ÔºöËÆ°ÁÆóÊñáÊú¨Áõ∏‰ººÂ∫¶
                const calculateSimilarity = (text1, text2) => {
                    const t1 = extractFieldText(text1).toLowerCase();
                    const t2 = extractFieldText(text2).toLowerCase();

                    if (!t1 || !t2) return 0;

                    // Áõ¥Êé•ÂåÖÂê´ÂæóÂàÜÊúÄÈ´ò
                    if (t1.includes(t2) || t2.includes(t1)) {
                        return 0.9;
                    }

                    // ËÆ°ÁÆóÂÖ±ÂêåÂ≠óÁ¨¶Êï∞
                    const chars1 = new Set(t1);
                    const chars2 = new Set(t2);
                    const intersection = new Set([...chars1].filter(x => chars2.has(x)));
                    const union = new Set([...chars1, ...chars2]);

                    return intersection.size / union.size;
                };

                // Ê≠•È™§ÂõõÔºöÊü•ËØ¢ËÆ∞ÂΩïÊï∞ÊçÆ
                console.log('ÂºÄÂßãÊü•ËØ¢ËÆ∞ÂΩïÔºåÊêúÁ¥¢ÂÖ≥ÈîÆËØç:', query);

                // ÊèêÂèñÊô∫ËÉΩÊêúÁ¥¢ÂÖ≥ÈîÆËØç
                const searchKeywords = extractSearchKeywords(query);
                console.log('ÊèêÂèñÁöÑÊêúÁ¥¢ÂÖ≥ÈîÆËØç:', searchKeywords.slice(0, 5)); // Âè™ÊòæÁ§∫Ââç5‰∏™

                // È¶ñÂÖàÂ∞ùËØïËé∑ÂèñÊâÄÊúâËÆ∞ÂΩïËøõË°åË∞ÉËØïÔºà‰∏çÊåáÂÆöÂ≠óÊÆµÂêçÔºåËé∑ÂèñÊâÄÊúâÂ≠óÊÆµÔºâ
                const debugOptions = {
                    pageSize: 10
                    // ÁßªÈô§ fieldNames ÂèÇÊï∞ÔºåËÆ©APIËøîÂõûÊâÄÊúâÂ≠óÊÆµ
                };

                try {
                    const debugResult = await queryFeishuRecords(appToken, targetTableId, accessToken, debugOptions);
                    console.log('Ë∞ÉËØïÔºöËé∑ÂèñÂà∞ÁöÑÊâÄÊúâËÆ∞ÂΩïÊï∞Èáè:', debugResult.records.length);
                    debugResult.records.forEach((record, index) => {
                        console.log(`Ë∞ÉËØïÔºöËÆ∞ÂΩï${index + 1}:`, {
                            ÊâÄÊúâÂ≠óÊÆµÂêç: Object.keys(record.fields),
                            Ê†áÈ¢òÂ≠óÊÆµ: record.fields['Ê†áÈ¢ò'] || record.fields['1'],
                            Âä©ÊâãÂ≠óÊÆµÂÜÖÂÆπ: (record.fields['Âä©Êâã'] || record.fields['Âä©Êâã']) ? extractFieldText(record.fields['Âä©Êâã'] || record.fields['Âä©Êâã']).substring(0, 100) + '...' : 'Êó†',
                            Âä©ÊâãÂ≠óÊÆµÈïøÂ∫¶: record.fields['Âä©Êâã'] ? extractFieldText(record.fields['Âä©Êâã']).length : 0,
                            ÂéüÂßãÂ≠óÊÆµÁªìÊûÑ: record.fields
                        });
                    });
                } catch (debugError) {
                    console.warn('Ë∞ÉËØïÊü•ËØ¢Â§±Ë¥•:', debugError.message);
                }

                // Â∞ùËØïÂ§öÁßçÊêúÁ¥¢Á≠ñÁï•
                let result = null;
                let searchStrategy = '';

                // Á≠ñÁï•1: ‰ΩøÁî®‰∏ªË¶ÅÂÖ≥ÈîÆËØçÂú®Âä©ÊâãÂ≠óÊÆµ‰∏≠ÊêúÁ¥¢
                try {
                    const primaryKeywords = searchKeywords.slice(0, 3); // ‰ΩøÁî®Ââç3‰∏™ÊúÄÈáçË¶ÅÁöÑÂÖ≥ÈîÆËØç
                    const assistantConditions = buildSafeQueryConditions(['Âä©Êâã'], primaryKeywords);
                    if (assistantConditions.length === 0) {
                        console.warn('Á≠ñÁï•1Ë∑≥ËøáÔºöÂä©ÊâãÂ≠óÊÆµ‰∏çÂ≠òÂú®');
                        throw new Error('Âä©ÊâãÂ≠óÊÆµ‰∏çÂ≠òÂú®');
                    }

                    const queryOptions1 = {
                        pageSize: topK,
                        filter: {
                            conjunction: "or", // Êîπ‰∏∫ORÔºåÂ¢ûÂä†ÂåπÈÖçÂèØËÉΩÊÄß
                            conditions: assistantConditions
                        }
                    };

                    result = await queryFeishuRecords(appToken, targetTableId, accessToken, queryOptions1);
                    searchStrategy = 'Âä©ÊâãÂ≠óÊÆµÂÖ≥ÈîÆËØçÂåπÈÖç';
                    console.log(`Á≠ñÁï•1(${searchStrategy})ÔºöÊâæÂà∞ ${result.records.length} Êù°ËÆ∞ÂΩï`);
                } catch (error1) {
                    console.warn('Á≠ñÁï•1Â§±Ë¥•:', error1.message);
                }

                // Á≠ñÁï•2: Â¶ÇÊûúÂä©ÊâãÂ≠óÊÆµÊêúÁ¥¢Êó†ÁªìÊûúÔºåÂ∞ùËØï‰ΩøÁî®Êõ¥Â§öÂÖ≥ÈîÆËØçÂú®Â§ö‰∏™Â≠óÊÆµ‰∏≠ÊêúÁ¥¢
                if (!result || result.records.length === 0) {
                    try {
                        const extendedKeywords = searchKeywords.slice(0, 5); // ‰ΩøÁî®Ââç5‰∏™ÂÖ≥ÈîÆËØç
                        const multiFieldConditions = buildSafeQueryConditions(['Âä©Êâã', 'ÂÜÖÂÆπ', 'Ê†áÈ¢ò', 'ÂÖ≥ÈîÆËØç'], extendedKeywords);
                        if (multiFieldConditions.length === 0) {
                            console.warn('Á≠ñÁï•2Ë∑≥ËøáÔºöÊ≤°ÊúâÂèØÁî®ÁöÑÊêúÁ¥¢Â≠óÊÆµ');
                            throw new Error('Ê≤°ÊúâÂèØÁî®ÁöÑÊêúÁ¥¢Â≠óÊÆµ');
                        }

                        const queryOptions2 = {
                            pageSize: topK * 2, // Ëé∑ÂèñÊõ¥Â§öÁªìÊûúÁî®‰∫éÂêéÁª≠ÊéíÂ∫è
                            filter: {
                                conjunction: "or",
                                conditions: multiFieldConditions
                            }
                        };

                        result = await queryFeishuRecords(appToken, targetTableId, accessToken, queryOptions2);
                        searchStrategy = 'Â§öÂ≠óÊÆµÊâ©Â±ïÊêúÁ¥¢';
                        console.log(`Á≠ñÁï•2(${searchStrategy})ÔºöÊâæÂà∞ ${result.records.length} Êù°ËÆ∞ÂΩï`);
                    } catch (error2) {
                        console.warn('Á≠ñÁï•2Â§±Ë¥•:', error2.message);
                    }
                }

                // Á≠ñÁï•3: Â¶ÇÊûú‰ªçÊó†ÁªìÊûúÔºåÂ∞ùËØïËé∑ÂèñÊâÄÊúâËÆ∞ÂΩïÂπ∂Âú®ÂÆ¢Êà∑Á´ØËøáÊª§
                if (!result || result.records.length === 0) {
                    try {
                        console.log('Á≠ñÁï•3ÔºöÂ∞ùËØïËé∑ÂèñÊâÄÊúâËÆ∞ÂΩïËøõË°åÂÆ¢Êà∑Á´ØËøáÊª§...');
                        const queryOptions3 = {
                            pageSize: 50
                            // ÁßªÈô§ fieldNamesÔºåËé∑ÂèñÊâÄÊúâÂ≠óÊÆµ
                        };

                        const allRecords = await queryFeishuRecords(appToken, targetTableId, accessToken, queryOptions3);
                        console.log(`Á≠ñÁï•3ÔºöËé∑ÂèñÊâÄÊúâËÆ∞ÂΩïËøõË°åÂÆ¢Êà∑Á´ØËøáÊª§ÔºåÊÄªËÆ∞ÂΩïÊï∞: ${allRecords.records.length}`);

                        // Êô∫ËÉΩÂÆ¢Êà∑Á´ØËøáÊª§ÂíåÊéíÂ∫è
                        const scoredRecords = allRecords.records.map(record => {
                            try {
                                let maxScore = 0;
                                let matchedField = '';
                                const searchFields = ['Âä©Êâã', 'ÂÜÖÂÆπ', 'Ê†áÈ¢ò', 'ÂÖ≥ÈîÆËØç'];

                                // ËÆ°ÁÆóÊØè‰∏™Â≠óÊÆµÁöÑÁõ∏‰ººÂ∫¶ÂæóÂàÜ
                                for (const fieldName of searchFields) {
                                    if (availableFieldNames.includes(fieldName)) {
                                        const fieldValue = record.fields[fieldName];
                                        const fieldText = extractFieldText(fieldValue);

                                        // ÂØπÊØè‰∏™ÊêúÁ¥¢ÂÖ≥ÈîÆËØçËÆ°ÁÆóÁõ∏‰ººÂ∫¶
                                        for (const keyword of searchKeywords.slice(0, 8)) {
                                            const similarity = calculateSimilarity(fieldText, keyword);
                                            if (similarity > maxScore) {
                                                maxScore = similarity;
                                                matchedField = fieldName;
                                            }
                                        }

                                        // ÁâπÂà´ÂÖ≥Ê≥®Âä©ÊâãÂ≠óÊÆµÔºåÁªô‰∫àÈ¢ùÂ§ñÊùÉÈáç
                                        if (fieldName === 'Âä©Êâã' && fieldText) {
                                            for (const keyword of searchKeywords.slice(0, 5)) {
                                                if (fieldText.toLowerCase().includes(keyword.toLowerCase())) {
                                                    maxScore = Math.max(maxScore, 0.8);
                                                    matchedField = 'Âä©Êâã';
                                                }
                                            }
                                        }
                                    }
                                }

                                return {
                                    record,
                                    score: maxScore,
                                    matchedField
                                };
                            } catch (filterError) {
                                console.warn('ËÆ°ÁÆóËÆ∞ÂΩïÂæóÂàÜÊó∂Âá∫Èîô:', filterError.message);
                                return { record, score: 0, matchedField: '' };
                            }
                        });

                        // ËøáÊª§Âá∫ÊúâÊÑè‰πâÁöÑÂåπÈÖçÔºàÂæóÂàÜ > 0.1ÔºâÂπ∂ÊåâÂæóÂàÜÊéíÂ∫è
                        const filteredRecords = scoredRecords
                            .filter(item => item.score > 0.1)
                            .sort((a, b) => {
                                // Âä©ÊâãÂ≠óÊÆµÂåπÈÖç‰ºòÂÖà
                                if (a.matchedField === 'Âä©Êâã' && b.matchedField !== 'Âä©Êâã') return -1;
                                if (b.matchedField === 'Âä©Êâã' && a.matchedField !== 'Âä©Êâã') return 1;
                                // ÁÑ∂ÂêéÊåâÂæóÂàÜÊéíÂ∫è
                                return b.score - a.score;
                            })
                            .map(item => item.record);

                        console.log('Êô∫ËÉΩËøáÊª§ÁªìÊûú:', filteredRecords.length, 'Êù°ËÆ∞ÂΩï');
                        if (filteredRecords.length > 0) {
                            console.log('ÊúÄ‰Ω≥ÂåπÈÖçÂæóÂàÜ:', scoredRecords.find(item => item.record === filteredRecords[0])?.score);
                        }

                        result = {
                            records: filteredRecords.slice(0, topK),
                            total: filteredRecords.length
                        };
                        searchStrategy = 'ÂÆ¢Êà∑Á´ØÊ®°Á≥äÂåπÈÖç';
                        console.log(`Á≠ñÁï•3(${searchStrategy})ÔºöËøáÊª§ÂêéÊâæÂà∞ ${result.records.length} Êù°ËÆ∞ÂΩï`);
                    } catch (error3) {
                        console.warn('Á≠ñÁï•3Â§±Ë¥•:', error3.message);

                        // Á≠ñÁï•4: ÊúÄÂêéÁöÑÈôçÁ∫ßÁ≠ñÁï•ÔºåÂ∞ùËØïÁÆÄÂçïËé∑ÂèñËÆ∞ÂΩïÔºà‰∏ç‰ΩøÁî®ËøáÊª§Ôºâ
                        try {
                            console.log('Á≠ñÁï•4ÔºöÈôçÁ∫ßÁ≠ñÁï•ÔºåÂ∞ùËØïÁÆÄÂçïËé∑ÂèñËÆ∞ÂΩï...');
                            const simpleOptions = {
                                pageSize: Math.min(topK * 2, 10)
                                // ÁßªÈô§ fieldNamesÔºåËé∑ÂèñÊâÄÊúâÂ≠óÊÆµ
                            };

                            const simpleRecords = await queryFeishuRecords(appToken, targetTableId, accessToken, simpleOptions);
                            console.log(`Á≠ñÁï•4ÔºöÁÆÄÂçïËé∑ÂèñÂà∞ ${simpleRecords.records.length} Êù°ËÆ∞ÂΩï`);

                            result = {
                                records: simpleRecords.records.slice(0, topK),
                                total: simpleRecords.records.length
                            };
                            searchStrategy = 'ÈôçÁ∫ßÁÆÄÂçïËé∑Âèñ';
                            console.log(`Á≠ñÁï•4(${searchStrategy})ÔºöËøîÂõû ${result.records.length} Êù°ËÆ∞ÂΩï`);
                        } catch (error4) {
                            console.warn('Á≠ñÁï•4‰πüÂ§±Ë¥•:', error4.message);
                            // Â¶ÇÊûúÊâÄÊúâÁ≠ñÁï•ÈÉΩÂ§±Ë¥•ÔºåËøîÂõûÁ©∫ÁªìÊûú‰ΩÜ‰∏çÊäõÂá∫ÈîôËØØ
                            result = { records: [], total: 0 };
                            searchStrategy = 'ÊâÄÊúâÁ≠ñÁï•Â§±Ë¥•ÔºåËøîÂõûÁ©∫ÁªìÊûú';
                            console.log('ÊâÄÊúâÊ£ÄÁ¥¢Á≠ñÁï•ÈÉΩÂ§±Ë¥•ÔºåÂ∞ÜÁªßÁª≠‰ΩøÁî®AIÂ¢ûÂº∫Ôºà‰∏ç‰ΩøÁî®Áü•ËØÜÂ∫ìÔºâ');
                        }
                    }
                }

                console.log(`‚úì Ê≠•È™§ÂõõÔºöÊü•ËØ¢ÂÆåÊàêÔºå‰ΩøÁî®Á≠ñÁï•"${searchStrategy}"ÔºåÊâæÂà∞ ${result.records.length} Êù°Áõ∏ÂÖ≥ËÆ∞ÂΩï`);

                // ÂØπÊâÄÊúâÁ≠ñÁï•ÁöÑÁªìÊûúËøõË°åÊô∫ËÉΩÊéíÂ∫èÔºàÈô§‰∫ÜÁ≠ñÁï•3Â∑≤ÁªèÊéíÂ∫èËøáÁöÑÔºâ
                if (searchStrategy !== 'ÂÆ¢Êà∑Á´ØÊ®°Á≥äÂåπÈÖç' && result.records.length > 1) {
                    console.log('ÂØπÊü•ËØ¢ÁªìÊûúËøõË°åÊô∫ËÉΩÊéíÂ∫è...');
                    const scoredResults = result.records.map(record => {
                        let maxScore = 0;
                        const fields = record.fields;

                        // ËÆ°ÁÆó‰∏éÊü•ËØ¢ÁöÑÁõ∏ÂÖ≥ÊÄßÂæóÂàÜ
                        for (const keyword of searchKeywords.slice(0, 5)) {
                            const assistantText = extractFieldText(fields['Âä©Êâã']);
                            const titleText = extractFieldText(fields['Ê†áÈ¢ò']);
                            const contentText = extractFieldText(fields['ÂÜÖÂÆπ']);

                            // Âä©ÊâãÂ≠óÊÆµÊùÉÈáçÊúÄÈ´ò
                            const assistantScore = calculateSimilarity(assistantText, keyword) * 1.0;
                            const titleScore = calculateSimilarity(titleText, keyword) * 0.8;
                            const contentScore = calculateSimilarity(contentText, keyword) * 0.6;

                            maxScore = Math.max(maxScore, assistantScore, titleScore, contentScore);
                        }

                        return { record, score: maxScore };
                    });

                    // ÊåâÂæóÂàÜÊéíÂ∫è
                    result.records = scoredResults
                        .sort((a, b) => b.score - a.score)
                        .map(item => item.record);

                    console.log('ÊéíÂ∫èÂÆåÊàêÔºåÊúÄÈ´òÂæóÂàÜ:', scoredResults[0]?.score);
                }

                // Â§ÑÁêÜÊü•ËØ¢ÁªìÊûúÔºàÂÆâÂÖ®Âú∞ËÆøÈóÆÂ≠óÊÆµÔºâ
                const methodologies = result.records.map(item => {
                    const fields = item.fields;

                    // ÂÆâÂÖ®Âú∞Ëé∑ÂèñÂ≠óÊÆµÂÄºÔºàÊîØÊåÅÂ≠óÊÆµÂêçÂíåÂ≠óÊÆµIDÔºâ
                    const getFieldValue = (fieldName, defaultValue = '') => {
                        // È¶ñÂÖàÂ∞ùËØï‰ΩøÁî®Â≠óÊÆµÂêç
                        let fieldValue = fields[fieldName];

                        // Â¶ÇÊûúÂ≠óÊÆµÂêç‰∏çÂ≠òÂú®ÔºåÂ∞ùËØï‰ΩøÁî®Â≠óÊÆµIDÔºàÊï∞Â≠óÈîÆÔºâ
                        if (!fieldValue) {
                            const fieldKeys = Object.keys(fields);
                            // Êü•ÊâæÂèØËÉΩÁöÑÂ≠óÊÆµIDÊàñÂÖ∂‰ªñÈîÆÂêç
                            for (const key of fieldKeys) {
                                const keyFieldValue = fields[key];
                                if (keyFieldValue) {
                                    const textValue = extractFieldText(keyFieldValue);
                                    // ÁÆÄÂçïÁöÑÂêØÂèëÂºèÂåπÈÖçÔºöÂ¶ÇÊûúÊòØÊ†áÈ¢òÂ≠óÊÆµÔºåÈÄöÂ∏∏ÂÜÖÂÆπËæÉÁü≠‰∏î‰∏çÂåÖÂê´Â§ßÈáèÊñáÊú¨
                                    if (fieldName === 'Ê†áÈ¢ò' && textValue && textValue.length < 200 && !textValue.includes('Êù•Ê∫êÔºö')) {
                                        fieldValue = keyFieldValue;
                                        break;
                                    }
                                    // Â¶ÇÊûúÊòØÂä©ÊâãÂ≠óÊÆµÔºåÈÄöÂ∏∏ÂÜÖÂÆπËæÉÈïø
                                    else if (fieldName === 'Âä©Êâã' && textValue && textValue.length > 100) {
                                        fieldValue = keyFieldValue;
                                        break;
                                    }
                                    // Â¶ÇÊûúÊòØÂÜÖÂÆπÂ≠óÊÆµÔºåÈÄöÂ∏∏ÂåÖÂê´'Êù•Ê∫êÔºö'ÊàñÂæàÈïø
                                    else if (fieldName === 'ÂÜÖÂÆπ' && textValue && (textValue.includes('Êù•Ê∫êÔºö') || textValue.length > 500)) {
                                        fieldValue = keyFieldValue;
                                        break;
                                    }
                                    // Â¶ÇÊûúÊòØÂÖ≥ÈîÆËØçÂ≠óÊÆµÔºåÈÄöÂ∏∏ÂåÖÂê´ÈÄóÂè∑ÂàÜÈöîÁöÑÁü≠ËØç
                                    else if (fieldName === 'ÂÖ≥ÈîÆËØç' && textValue && textValue.includes(',') && textValue.length < 500) {
                                        fieldValue = keyFieldValue;
                                        break;
                                    }
                                }
                            }
                        }

                        return extractFieldText(fieldValue) || defaultValue;
                    };

                    const methodology = {
                        title: getFieldValue('Ê†áÈ¢ò', 'Êú™Áü•Ê†áÈ¢ò'),
                        content: getFieldValue('ÂÜÖÂÆπ'),
                        keywords: getFieldValue('ÂÖ≥ÈîÆËØç'),
                        assistant: getFieldValue('Âä©Êâã'),
                        recordId: item.record_id
                    };

                    // ËÆ°ÁÆóÂåπÈÖçÂ∫¶Áî®‰∫éË∞ÉËØï
                    let matchScore = 0;
                    const assistantText = methodology.assistant || '';
                    for (const keyword of searchKeywords.slice(0, 3)) {
                        if (assistantText.toLowerCase().includes(keyword.toLowerCase())) {
                            matchScore += 1;
                        }
                    }
                    methodology.matchScore = matchScore;

                    return methodology;
                });

                console.log('È£û‰π¶Êï∞ÊçÆÊ£ÄÁ¥¢ÂÆåÊàêÔºåËøîÂõûÁªìÊûú');
                console.log('ËøîÂõûÁöÑÊñπÊ≥ïËÆ∫Êï∞ÊçÆ:', methodologies.map((m, index) => ({
                    Â∫èÂè∑: index + 1,
                    Ê†áÈ¢ò: m.title,
                    ÂåπÈÖçÂæóÂàÜ: m.matchScore,
                    Âä©ÊâãÂ≠óÊÆµÈïøÂ∫¶: m.assistant.length,
                    Âä©ÊâãÂÜÖÂÆπÈ¢ÑËßà: m.assistant ? m.assistant.substring(0, 150) + '...' : 'Êó†ÂÜÖÂÆπ',
                    ÂÖ≥ÈîÆËØç: m.keywords
                })));

                // Â¶ÇÊûúÊâæÂà∞‰∫ÜÁªìÊûúÔºåÊòæÁ§∫ÊúÄ‰Ω≥ÂåπÈÖçÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
                if (methodologies.length > 0) {
                    const bestMatch = methodologies[0];
                    console.log('üéØ ÊúÄ‰Ω≥ÂåπÈÖçÊñπÊ≥ïËÆ∫:');
                    console.log('Ê†áÈ¢ò:', bestMatch.title);
                    console.log('ÂåπÈÖçÂæóÂàÜ:', bestMatch.matchScore);
                    console.log('Âä©ÊâãÂÜÖÂÆπÈïøÂ∫¶:', bestMatch.assistant.length);
                    console.log('ÂÖ≥ÈîÆËØç:', bestMatch.keywords);

                    // ÊòæÁ§∫ÂåπÈÖçÁöÑÂÖ≥ÈîÆËØç
                    const matchedKeywords = searchKeywords.slice(0, 5).filter(keyword =>
                        bestMatch.assistant.toLowerCase().includes(keyword.toLowerCase())
                    );
                    if (matchedKeywords.length > 0) {
                        console.log('ÂåπÈÖçÁöÑÂÖ≥ÈîÆËØç:', matchedKeywords);
                    }
                } else {
                    console.log('‚ö†Ô∏è Êú™ÊâæÂà∞ÂåπÈÖçÁöÑÊñπÊ≥ïËÆ∫');
                    console.log('ÊêúÁ¥¢ÂÖ≥ÈîÆËØç:', searchKeywords.slice(0, 5));
                    console.log('Âª∫ËÆÆÔºö');
                    console.log('1. Ê£ÄÊü•È£û‰π¶Ë°®Ê†º‰∏≠ÊòØÂê¶ÊúâÁõ∏ÂÖ≥ÂÜÖÂÆπ');
                    console.log('2. Â∞ùËØï‰ΩøÁî®Êõ¥ÈÄöÁî®ÁöÑÂÖ≥ÈîÆËØç');
                    console.log('3. Ê£ÄÊü•„ÄêÂä©Êâã„ÄëÂ≠óÊÆµÊòØÂê¶ÂåÖÂê´Áõ∏ÂÖ≥ÊñπÊ≥ïËÆ∫');
                }

                resolve(methodologies);

            } catch (error) {
                console.error('È£û‰π¶Êï∞ÊçÆÊ£ÄÁ¥¢Â§±Ë¥•:', error);
                reject(error);
            }
        });
    }

    // ÂàõÂª∫È£û‰π¶Â§öÁª¥Ë°®Ê†ºÂ≠óÊÆµ
    function createFeishuField(baseId, tableId, accessToken, fieldName, fieldType = 1) {
        return new Promise((resolve, reject) => {
            console.log(`Ê≠£Âú®ÂàõÂª∫Â≠óÊÆµ: ${fieldName}`);

            const requestData = {
                field_name: fieldName,
                type: fieldType
            };

            GM_xmlhttpRequest({
                method: 'POST',
                url: `${FEISHU_CONFIG.API_URL}/bitable/v1/apps/${baseId}/tables/${tableId}/fields`,
                headers: {
                    'Authorization': `Bearer ${accessToken}`,
                    'Content-Type': 'application/json; charset=utf-8'
                },
                data: JSON.stringify(requestData),
                onload: function(response) {
                    console.log(`ÂàõÂª∫Â≠óÊÆµ${fieldName}ÂìçÂ∫îÁä∂ÊÄÅ:`, response.status);
                    console.log(`ÂàõÂª∫Â≠óÊÆµ${fieldName}ÂìçÂ∫îÂÜÖÂÆπ:`, response.responseText);
                    try {
                        const data = JSON.parse(response.responseText);
                        if (data.code === 0) {
                            console.log(`Â≠óÊÆµ"${fieldName}"ÂàõÂª∫ÊàêÂäü`);
                            resolve(data.data.field);
                        } else {
                            console.error(`ÂàõÂª∫Â≠óÊÆµ${fieldName}APIÈîôËØØ:`, data);
                            let errorMsg = `ÂàõÂª∫Â≠óÊÆµ"${fieldName}"Â§±Ë¥•`;
                            if (data.msg) {
                                errorMsg += ': ' + data.msg;
                            }
                            reject(new Error(errorMsg));
                        }
                    } catch (e) {
                        console.error(`Ëß£ÊûêÂàõÂª∫Â≠óÊÆµ${fieldName}ÂìçÂ∫îÂ§±Ë¥•:`, e, 'ÂéüÂßãÂìçÂ∫î:', response.responseText);
                        reject(new Error('ÂìçÂ∫îËß£ÊûêÂ§±Ë¥•: ' + e.message));
                    }
                },
                onerror: function(error) {
                    console.error(`ÂàõÂª∫Â≠óÊÆµ${fieldName}ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•:`, error);
                    reject(new Error('ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•'));
                }
            });
        });
    }

    // Ëé∑ÂèñÈ£û‰π¶Â§öÁª¥Ë°®Ê†ºÂ≠óÊÆµÂàóË°®
    function getFeishuFields(baseId, tableId, accessToken, retryCount = 0) {
        return new Promise((resolve, reject) => {
            console.log('Ê≠£Âú®Ëé∑ÂèñÈ£û‰π¶Ë°®Ê†ºÂ≠óÊÆµÂàóË°®...');

            GM_xmlhttpRequest({
                method: 'GET',
                url: `${FEISHU_CONFIG.API_URL}/bitable/v1/apps/${baseId}/tables/${tableId}/fields`,
                headers: {
                    'Authorization': `Bearer ${accessToken}`
                },
                timeout: 30000, // Â¢ûÂä†Ë∂ÖÊó∂Êó∂Èó¥Âà∞30Áßí
                onload: function(response) {
                    console.log('Ëé∑ÂèñÂ≠óÊÆµÂàóË°®ÂìçÂ∫îÁä∂ÊÄÅ:', response.status);

                    // Ê£ÄÊü•ÂìçÂ∫îÊòØÂê¶ÂÆåÊï¥
                    if (!response.responseText || response.responseText.trim() === '') {
                        console.warn('Ëé∑ÂèñÂà∞Á©∫ÂìçÂ∫îÔºåÂ∞ùËØïÈáçËØï...');
                        if (retryCount < 3) {
                            setTimeout(() => {
                                getFeishuFields(baseId, tableId, accessToken, retryCount + 1)
                                    .then(resolve)
                                    .catch(reject);
                            }, 1000 * (retryCount + 1));
                            return;
                        } else {
                            reject(new Error('Ëé∑ÂèñÂ≠óÊÆµÂàóË°®Â§±Ë¥•ÔºöÂìçÂ∫î‰∏∫Á©∫'));
                            return;
                        }
                    }

                    // Ê£ÄÊü•ÂìçÂ∫îÊòØÂê¶Ë¢´Êà™Êñ≠
                    const responseText = response.responseText.trim();
                    if (!responseText.endsWith('}') && !responseText.endsWith(']')) {
                        console.warn('ÂìçÂ∫îÂèØËÉΩË¢´Êà™Êñ≠ÔºåÂ∞ùËØïÈáçËØï...', 'ÂìçÂ∫îÈïøÂ∫¶:', responseText.length);
                        if (retryCount < 3) {
                            setTimeout(() => {
                                getFeishuFields(baseId, tableId, accessToken, retryCount + 1)
                                    .then(resolve)
                                    .catch(reject);
                            }, 1000 * (retryCount + 1));
                            return;
                        }
                    }

                    console.log('Ëé∑ÂèñÂ≠óÊÆµÂàóË°®ÂìçÂ∫îÂÜÖÂÆπÈïøÂ∫¶:', responseText.length);
                    console.log('Ëé∑ÂèñÂ≠óÊÆµÂàóË°®ÂìçÂ∫îÂÜÖÂÆπ:', responseText.substring(0, 500) + (responseText.length > 500 ? '...' : ''));

                    try {
                        const data = JSON.parse(responseText);
                        if (data.code === 0) {
                            const fields = data.data.items || [];
                            console.log(`Ëé∑ÂèñÂà∞ ${fields.length} ‰∏™Â≠óÊÆµ`);
                            resolve(fields);
                        } else {
                            console.error('Ëé∑ÂèñÂ≠óÊÆµÂàóË°®APIÈîôËØØ:', data);
                            reject(new Error(data.msg || 'Ëé∑ÂèñÂ≠óÊÆµÂàóË°®Â§±Ë¥•'));
                        }
                    } catch (e) {
                        console.error('Ëß£ÊûêËé∑ÂèñÂ≠óÊÆµÂàóË°®ÂìçÂ∫îÂ§±Ë¥•:', e);
                        console.error('ÂéüÂßãÂìçÂ∫îÈïøÂ∫¶:', responseText.length);
                        console.error('ÂéüÂßãÂìçÂ∫îÂâç500Â≠óÁ¨¶:', responseText.substring(0, 500));

                        // Â¶ÇÊûúÊòØJSONËß£ÊûêÈîôËØØ‰∏îËøòÊúâÈáçËØïÊ¨°Êï∞ÔºåÂ∞ùËØïÈáçËØï
                        if (retryCount < 3) {
                            console.log(`JSONËß£ÊûêÂ§±Ë¥•ÔºåËøõË°åÁ¨¨${retryCount + 1}Ê¨°ÈáçËØï...`);
                            setTimeout(() => {
                                getFeishuFields(baseId, tableId, accessToken, retryCount + 1)
                                    .then(resolve)
                                    .catch(reject);
                            }, 2000 * (retryCount + 1));
                            return;
                        }

                        reject(new Error('ÂìçÂ∫îËß£ÊûêÂ§±Ë¥•: ' + e.message));
                    }
                },
                onerror: function(error) {
                    console.error('Ëé∑ÂèñÂ≠óÊÆµÂàóË°®ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•:', error);
                    if (retryCount < 3) {
                        console.log(`ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•ÔºåËøõË°åÁ¨¨${retryCount + 1}Ê¨°ÈáçËØï...`);
                        setTimeout(() => {
                            getFeishuFields(baseId, tableId, accessToken, retryCount + 1)
                                .then(resolve)
                                .catch(reject);
                        }, 2000 * (retryCount + 1));
                        return;
                    }
                    reject(new Error('ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•'));
                },
                ontimeout: function() {
                    console.error('Ëé∑ÂèñÂ≠óÊÆµÂàóË°®ËØ∑Ê±ÇË∂ÖÊó∂');
                    if (retryCount < 3) {
                        console.log(`ËØ∑Ê±ÇË∂ÖÊó∂ÔºåËøõË°åÁ¨¨${retryCount + 1}Ê¨°ÈáçËØï...`);
                        setTimeout(() => {
                            getFeishuFields(baseId, tableId, accessToken, retryCount + 1)
                                .then(resolve)
                                .catch(reject);
                        }, 3000 * (retryCount + 1));
                        return;
                    }
                    reject(new Error('ËØ∑Ê±ÇË∂ÖÊó∂'));
                }
            });
        });
    }

    // Á°Æ‰øùÂøÖË¶ÅÂ≠óÊÆµÂ≠òÂú®
    async function ensureRequiredFields(baseId, tableId, accessToken) {
        try {
            console.log('Ê£ÄÊü•Âπ∂ÂàõÂª∫ÂøÖË¶ÅÂ≠óÊÆµ...');

            // Ëé∑ÂèñÁé∞ÊúâÂ≠óÊÆµ
            const existingFields = await getFeishuFields(baseId, tableId, accessToken);
            const fieldNames = existingFields.map(field => field.field_name);

            // ÂÆö‰πâÂøÖË¶ÅÂ≠óÊÆµ
             const requiredFields = [
                 { name: 'Ê†áÈ¢ò', type: 1 },      // ÊñáÊú¨
                 { name: 'ÂÜÖÂÆπ', type: 1 },      // ÊñáÊú¨
                 { name: 'ÂÖ≥ÈîÆËØç', type: 1 },    // ÊñáÊú¨
                 { name: 'Âä©Êâã', type: 1 },      // ÊñáÊú¨
                 { name: 'ÂàõÂª∫Êó∂Èó¥', type: 1 }   // ÊñáÊú¨Ôºà‰πüÂèØ‰ª•Áî®1001ÂàõÂª∫Êó∂Èó¥Á±ªÂûãÔºâ
             ];

            // Ê£ÄÊü•Âπ∂ÂàõÂª∫Áº∫Â§±ÁöÑÂ≠óÊÆµ
            for (const field of requiredFields) {
                if (!fieldNames.includes(field.name)) {
                    console.log(`Â≠óÊÆµ"${field.name}"‰∏çÂ≠òÂú®ÔºåÊ≠£Âú®ÂàõÂª∫...`);
                    try {
                        await createFeishuField(baseId, tableId, accessToken, field.name, field.type);
                        console.log(`Â≠óÊÆµ"${field.name}"ÂàõÂª∫ÊàêÂäü`);
                    } catch (error) {
                        console.warn(`ÂàõÂª∫Â≠óÊÆµ"${field.name}"Â§±Ë¥•:`, error.message);
                        // ÁªßÁª≠ÂàõÂª∫ÂÖ∂‰ªñÂ≠óÊÆµÔºå‰∏ç‰∏≠Êñ≠ÊµÅÁ®ã
                    }
                } else {
                    console.log(`Â≠óÊÆµ"${field.name}"Â∑≤Â≠òÂú®`);
                }
            }

            console.log('Â≠óÊÆµÊ£ÄÊü•ÂÆåÊàê');
        } catch (error) {
            console.error('Ê£ÄÊü•Â≠óÊÆµÊó∂Âá∫Èîô:', error);
            throw error;
        }
    }

    // Ê∑ªÂä†ÊñπÊ≥ïËÆ∫Âà∞È£û‰π¶Áü•ËØÜÂ∫ì
    function addToFeishu(title, content, keywords = '') {
        return new Promise(async (resolve, reject) => {
            try {
                const token = await getFeishuAccessToken();

                // Á°Æ‰øùÂøÖË¶ÅÂ≠óÊÆµÂ≠òÂú®
                try {
                    await ensureRequiredFields(FEISHU_CONFIG.BASE_ID, FEISHU_CONFIG.TABLE_ID, token);
                } catch (fieldError) {
                    console.warn('Â≠óÊÆµÊ£ÄÊü•Â§±Ë¥•Ôºå‰ΩÜÁªßÁª≠Â∞ùËØïÊ∑ªÂä†Êï∞ÊçÆ:', fieldError.message);
                }

                const requestData = {
                    records: [{
                        fields: {
                            'Ê†áÈ¢ò': title,
                            'ÂÜÖÂÆπ': content,
                            'ÂÖ≥ÈîÆËØç': keywords,
                            'ÂàõÂª∫Êó∂Èó¥': new Date().toISOString()
                        }
                    }]
                };

                GM_xmlhttpRequest({
                    method: 'POST',
                    url: `${FEISHU_CONFIG.API_URL}/bitable/v1/apps/${FEISHU_CONFIG.BASE_ID}/tables/${FEISHU_CONFIG.TABLE_ID}/records/batch_create`,
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    data: JSON.stringify(requestData),
                    onload: function(response) {
                        console.log('È£û‰π¶Ê∑ªÂä†ËÆ∞ÂΩïÂìçÂ∫îÁä∂ÊÄÅ:', response.status);
                        console.log('È£û‰π¶Ê∑ªÂä†ËÆ∞ÂΩïÂìçÂ∫îÂÜÖÂÆπ:', response.responseText);
                        try {
                            const data = JSON.parse(response.responseText);
                            if (data.code === 0) {
                                resolve(data.data);
                            } else {
                                console.error('È£û‰π¶Ê∑ªÂä†ËÆ∞ÂΩïAPIÈîôËØØ:', data);
                                let errorMsg = 'Ê∑ªÂä†Âà∞È£û‰π¶Â§±Ë¥•';
                                if (data.msg) {
                                    errorMsg += ': ' + data.msg;
                                }
                                if (response.status === 403 || data.msg?.includes('Forbidden')) {
                                    errorMsg = 'È£û‰π¶Â∫îÁî®ÊùÉÈôê‰∏çË∂≥ÔºåËØ∑Ê£ÄÊü•Â∫îÁî®ÊùÉÈôêÈÖçÁΩÆÔºö\n1. Á°Æ‰øùÂ∫îÁî®Êúâ"Êü•Áúã„ÄÅÁºñËæë„ÄÅÊñ∞Â¢ûÂíåÂà†Èô§Â§öÁª¥Ë°®Ê†º"ÊùÉÈôê\n2. Á°Æ‰øùÂ∫îÁî®Â∑≤ÂèëÂ∏ÉÂπ∂Ëé∑ÂæóÁÆ°ÁêÜÂëòÂÆ°Êâπ\n3. Ê£ÄÊü•Base IDÂíåTable IDÊòØÂê¶Ê≠£Á°Æ';
                                }
                                reject(new Error(errorMsg));
                            }
                        } catch (e) {
                            console.error('Ëß£ÊûêÈ£û‰π¶Ê∑ªÂä†ËÆ∞ÂΩïÂìçÂ∫îÂ§±Ë¥•:', e, 'ÂéüÂßãÂìçÂ∫î:', response.responseText);
                            reject(new Error('ÂìçÂ∫îËß£ÊûêÂ§±Ë¥•: ' + e.message));
                        }
                    },
                    onerror: function(error) {
                        console.error('È£û‰π¶Ê∑ªÂä†ËÆ∞ÂΩïÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•:', error);
                        reject(new Error('ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•'));
                    }
                });
            } catch (error) {
                reject(error);
            }
        });
    }

    // ==================== AIÂ¢ûÂº∫Áõ∏ÂÖ≥ ====================

    // Ë∞ÉÁî®AI APIÂ¢ûÂº∫ÊèêÁ§∫ËØç
    function enhancePromptWithAI(userInput, methodologyContext = '') {
        return new Promise((resolve, reject) => {
            const systemPrompt = `ÊâÆÊºî‰∏ÄÂêçÊèêÁ§∫ËØçÂ∑•Á®ãÂ∏àÔºåÊ†πÊçÆÊàëÊé•‰∏ãÊù•‰∏∫‰Ω†Êèê‰æõÁöÑÈúÄÊ±Ç„ÄÅÁõ∏ÂÖ≥ÊñπÊ≥ïËÆ∫ÂíåÁ§∫‰æãÔºåÂàõÂª∫‰∏Ä‰∏™ÂèØ‰ª•Êª°Ë∂≥ÈúÄÊ±ÇÁöÑÊèêÁ§∫ËØç„ÄÇ

## Âàõ‰ΩúÊñπÊ≥ï
1. ÂàÜÊûêÈúÄÊ±ÇÔºöÁêÜËß£ÊàñÊåñÊéòÈúÄÊ±ÇÁöÑËÉåÊôØÂíåÁõÆÊ†áÔºåÂ∞ΩÂèØËÉΩËØ¶ÁªÜÁöÑÊèê‰æõÂú®ÊèêÁ§∫ËØç‰∏≠Ôºå‰ΩÜ‰∏çË¶ÅÊÑèÂêëÁºñÈÄ†ÈúÄÊ±Ç‰∏≠Êú™ÊèèËø∞ÁöÑ‰ø°ÊÅØÔºõ
2. ÊñπÊ≥ïËÆ∫ÊåëÈÄâÔºöÊàë‰ºö‰∏∫‰Ω†Êèê‰æõ 0-3‰∏™‰∏éÁî®Êà∑ÈúÄÊ±ÇÁõ∏ÂÖ≥ÁöÑÊñπÊ≥ïËÆ∫Ôºå‰Ω†ÂèØ‰ª•ÈÄâÊã©ÂÖ∂‰∏≠ 1 ‰∏™ÊàñÊï¥ÂêàÂ§ö‰∏™ÔºåÊîæÂú®ÊèêÁ§∫ËØç‰∏≠„ÄÇÂ¶ÇÊûúÊé•‰∏ãÊù•ÁöÑ‰ø°ÊÅØ‰∏≠‰∏çÂåÖÂê´ÊñπÊ≥ïËÆ∫ÔºåÂèØ‰ª•ÁúÅÁï•„ÄÇ
3. Êàë‰∏∫‰Ω†Êèê‰æõÁöÑ‰ø°ÊÅØ‰∏≠ÂèØËÉΩ‰ºöÂåÖÂê´ÂèÇËÄÉÁ§∫‰æãÔºå‰ªé‰∏≠ÈÄâÊã©‰∏éÈúÄÊ±ÇÁöÑËæìÂá∫Áõ∏ÂÖ≥ÁöÑÁ§∫‰æãÔºåÊîæÂú®ÊèêÁ§∫ËØç‰∏≠„ÄÇÂ¶ÇÊûúÊú™Êèê‰æõÁ§∫‰æãÔºåÂàôÁúÅÁï•ËøôÈÉ®ÂàÜ„ÄÇ

## ÊèêÁ§∫ËØçÊ°ÜÊû∂
Âú®ÂàõÂª∫ÊèêÁ§∫ËØçÊó∂ÔºåÂèÇËÄÉ‰ª•‰∏ãÊ°ÜÊû∂Ôºö

# ÊâÆÊºîËßíËâ≤Ôºö
‰∏∫ AI ÂÆö‰πâËßíËâ≤ÔºåËÆ©ÂÆÉÁî±ÈÄöÁî®ÁöÑ"Âä©ÁêÜ"ÔºåÂèòÊàêÊõ¥ÊìÖÈïøÂ§ÑÁêÜÂÖ∑‰ΩìÂ∑•‰ΩúÁöÑÂÆöÂêëËßíËâ≤ÔºåÂèØ‰ª•‰ΩøÁî®ËÅå‰∏öÊù•ÊèèËø∞ÂÆö‰πâ„ÄÇ

## ÂÅö‰ªÄ‰πàÔºö
Âêë AI Â∞ΩÂèØËÉΩËØ¶ÁªÜÁöÑÊèèËø∞‰ªªÂä°ÁöÑËÉåÊôØ‰ø°ÊÅØÔºåÂèØ‰ª•Ë∞ÉÁî®ÂÆÉÊõ¥Â§öÁöÑ"Áü•ËØÜËÆ∞ÂøÜ"„ÄÇ

## ÊÄé‰πàÂÅöÔºö
Êää‰Ω†ÂÆåÊàêËøôÈ°π‰ªªÂä°ÁöÑÊàêÁÜüÊñπÊ≥ïËÆ∫ÂëäËØâAIÔºåÂèØ‰ª•Á°Æ‰øù AI ÊåâÁÖßÈ¢ÑÊúüÁöÑÊñπÊ≥ïÂÆåÊàê‰ªªÂä°ÔºåÂá†‰∏™tipsÔºö
1ÔºâÂ¶ÇÊûúËÉΩÁªôÂá∫ÂÆåÊàê‰ªªÂä°ÁöÑÊ≠•È™§ÔºåÂπ∂Ë¶ÅÊ±Ç AI ËæìÂá∫ËøáÁ®ãÊåáÊ†áÔºåÊïàÊûú‰ºöÈùûÂ∏∏Ê£íÔºõ
2ÔºâÂèØ‰ª•‰ΩøÁî®Áé∞ÊàêÁöÑÊñπÊ≥ïËÆ∫ÊàñËÄÖÁêÜËÆ∫Áü•ËØÜÊ°ÜÊû∂ÔºåÂç≥‰æø‰Ω†Âπ∂‰∏çËÉΩÁÜüÁªÉÁöÑÂ∫îÁî®ÂÆÉÔºõ
3ÔºâÂ¶ÇÊûú‰Ω†‰∏çÁü•ÈÅìËøôÈ°πÂ∑•‰ΩúÁöÑÊñπÊ≥ïÔºåÂèØ‰ª•ÂÖàÂêë AI ËØ¢ÈóÆÔºå‰ªéÂÆÉÊé®ËçêÁöÑÊñπÊ≥ï‰∏≠ÈÄâÊã©‰Ω†ËßâÂæóÈù†Ë∞±ÁöÑ„ÄÇ

## ÂèÇËÄÉÁ§∫‰æãÔºö
"ÊÄé‰πàÂÅö"Âíå"ÁªìÊûúË¶ÅÊ±Ç"‰∏≠‰Ω†ÂèØËÉΩÂàó‰∏çÂá∫ÂÖ®Èù¢ÁöÑ‰ø°ÊÅØÔºåËÆ© AI Ëá™Â∑±Âú®Á§∫‰æã‰∏≠Â≠¶‰π†„ÄÇ‰øùÁïôÁ§∫‰æãÂâçÂêéÁöÑ‰ª£Á†ÅÂùóÂàÜÈöîÁ¨¶„ÄÇ

## ÁªìÊûúË¶ÅÊ±ÇÔºö
‰∏∫ AI ÂàóÂá∫ËæìÂá∫ÁöÑË¶ÅÊ±ÇÔºåÂåÖÊã¨Ê†ºÂºè„ÄÅÁªìÊûÑÁ≠â„ÄÇ
Âè¶‰∏Ä‰∏™ÈáçË¶ÅÁöÑÊèêÁ§∫Ôºö‰∏∫‰∫ÜÈò≤Ê≠¢ AI ËÉ°Áºñ‰π±ÈÄ†ÔºåÊúâ‰∫õÊó∂ÂÄôÂèØ‰ª•Âú®Ë¶ÅÊ±Ç‰∏∫ AI ÁïôÂá∫Ë∑ØÔºåÁ±ª‰ºº"Â¶ÇÊûú‰Ω†Êó†Ê≥ïÊâßË°åËøô‰∏™‰ªªÂä°ÔºåÂèØ‰ª•ÂõûÂ§çXXX"„ÄÇ

## ËæìÂá∫Ë¶ÅÊ±Ç
Áõ¥Êé•ËæìÂá∫‰ºòÂåñÂêéÁöÑÊèêÁ§∫ËØçÔºå‰∏çË¶ÅÂåÖÂê´‰ªª‰ΩïËß£ÈáäÊàñËØ¥Êòé„ÄÇÁ°Æ‰øùÊèêÁ§∫ËØçÊ∏ÖÊô∞„ÄÅÂÖ∑‰Ωì„ÄÅÂèØÊâßË°å„ÄÇ`;

            let userPrompt = `Áî®Êà∑ÈúÄÊ±ÇÔºö
<user_query>
${userInput}
</user_query>`;

            if (methodologyContext && methodologyContext.trim()) {
                userPrompt += `

ÂèØÈÄâÊñπÊ≥ïËÆ∫ÊîØÊåÅ
<methodology>
${methodologyContext}
</methodology>`;
            }

            const requestData = {
                model: AI_CONFIG.MODEL_NAME,
                messages: [
                    { role: 'system', content: systemPrompt },
                    { role: 'user', content: userPrompt }
                ],
                temperature: 0.7,
                max_tokens: 2000
            };

            console.log('ÂèëÈÄÅAIËØ∑Ê±ÇÂà∞:', `${AI_CONFIG.BASE_URL}/chat/completions`);
            console.log('AIÈÖçÁΩÆ:', {
                MODEL_NAME: AI_CONFIG.MODEL_NAME,
                BASE_URL: AI_CONFIG.BASE_URL,
                API_KEY: AI_CONFIG.API_KEY ? 'Â∑≤ÈÖçÁΩÆ' : 'Êú™ÈÖçÁΩÆ'
            });

            GM_xmlhttpRequest({
                method: 'POST',
                url: `${AI_CONFIG.BASE_URL}/chat/completions`,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${AI_CONFIG.API_KEY}`
                },
                data: JSON.stringify(requestData),
                onload: function(response) {
                    console.log('AIÂìçÂ∫îÁä∂ÊÄÅ:', response.status);
                    console.log('AIÂìçÂ∫îÂÜÖÂÆπ:', response.responseText);
                    try {
                        const data = JSON.parse(response.responseText);
                        if (data.choices && data.choices[0] && data.choices[0].message) {
                            resolve(data.choices[0].message.content.trim());
                        } else {
                            console.error('AIÂìçÂ∫îÊ†ºÂºèÂºÇÂ∏∏:', data);
                            reject(new Error('AIÂìçÂ∫îÊ†ºÂºèÂºÇÂ∏∏: ' + JSON.stringify(data)));
                        }
                    } catch (e) {
                        console.error('Ëß£ÊûêAIÂìçÂ∫îÂ§±Ë¥•:', e, 'ÂéüÂßãÂìçÂ∫î:', response.responseText);
                        reject(new Error('ÂìçÂ∫îËß£ÊûêÂ§±Ë¥•: ' + e.message));
                    }
                },
                onerror: function(error) {
                    console.error('AIÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•:', error);
                    reject(new Error('AIËØ∑Ê±ÇÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•ÂíåAPIÈÖçÁΩÆ'));
                },
                ontimeout: function() {
                    console.error('AIËØ∑Ê±ÇË∂ÖÊó∂');
                    reject(new Error('AIËØ∑Ê±ÇË∂ÖÊó∂'));
                }
            });
        });
    }

    // ==================== ËæìÂÖ•Â§ÑÁêÜÁõ∏ÂÖ≥ ====================

    // ËæìÂÖ•Â§ÑÁêÜÂô®Á±ª
    class InputHandler {
        constructor(element, inputType) {
            this.element = element;
            this.inputType = inputType;
        }

        getInputText() {
            switch (this.inputType) {
                case 'textarea':
                    return this.element.value || '';
                case 'contenteditable':
                    return this.getContentEditableText();
                default:
                    return '';
            }
        }

        setInputText(text) {
            try {
                switch (this.inputType) {
                    case 'textarea':
                        this.setTextareaValue(text);
                        break;
                    case 'contenteditable':
                        this.setContentEditableText(text);
                        break;
                    default:
                        this.element.textContent = text;
                }

                this.triggerInput();

            } catch (error) {
                console.error('ËÆæÁΩÆËæìÂÖ•ÊñáÊú¨Â§±Ë¥•:', error);
                // ÂõûÈÄÄÊñπÊ°à
                try {
                    if (this.element.value !== undefined) {
                        this.element.value = text;
                    } else {
                        this.element.textContent = text;
                    }
                    this.triggerInput();
                } catch (fallbackError) {
                    console.error('ÂõûÈÄÄËÆæÁΩÆ‰πüÂ§±Ë¥•:', fallbackError);
                }
            }
        }

        focus() {
            try {
                this.element.focus();
                if (this.inputType === 'contenteditable') {
                    this.setCursorToEnd();
                }
            } catch (e) {
                console.warn('ËÅöÁÑ¶Â§±Ë¥•:', e);
            }
        }

        getContentEditableText() {
            return this.element.textContent || '';
        }

        setTextareaValue(text) {
            try {
                const element = this.element;
                const start = element.selectionStart;
                element.value = text;
                const newPos = Math.min(text.length, start + text.length);
                element.setSelectionRange(newPos, newPos);
            } catch (e) {
                console.warn('ËÆæÁΩÆtextareaÂÄºÂ§±Ë¥•:', e);
            }
        }

        setContentEditableText(text) {
            try {
                if (this.isKimiEditor()) {
                    this.setKimiEditorText(text);
                } else {
                    this.element.textContent = text;
                }
            } catch (e) {
                console.warn('ËÆæÁΩÆcontenteditableÊñáÊú¨Â§±Ë¥•:', e);
                this.element.textContent = text;
            }
        }

        isKimiEditor() {
            return this.element.classList.contains('chat-input-editor') ||
                   this.element.hasAttribute('data-lexical-editor') ||
                   this.element.getAttribute('contenteditable') === 'true' ||
                   this.element.querySelector('[data-lexical-text]') !== null;
        }

        setKimiEditorText(text) {
            try {
                // Ê∏ÖÁ©∫Áé∞ÊúâÂÜÖÂÆπ
                this.element.innerHTML = '';

                // ÂàõÂª∫ÊÆµËêΩÂÖÉÁ¥†
                const p = document.createElement('p');
                p.setAttribute('dir', 'ltr');

                // Â§ÑÁêÜÊñáÊú¨ÂÜÖÂÆπ
                const lines = text.split('\n');

                lines.forEach((line, index) => {
                    if (index > 0) {
                        p.appendChild(document.createElement('br'));
                    }
                    if (line.trim()) {
                        const span = document.createElement('span');
                        span.setAttribute('data-lexical-text', 'true');
                        span.textContent = line;
                        p.appendChild(span);
                    }
                });

                // Â¶ÇÊûúÊ≤°ÊúâÂÜÖÂÆπÔºåÊ∑ªÂä†ÈªòËÆ§span
                if (p.children.length === 0) {
                    const span = document.createElement('span');
                    span.setAttribute('data-lexical-text', 'true');
                    span.textContent = text || '';
                    p.appendChild(span);
                }

                // Ê∑ªÂä†Âà∞ÁºñËæëÂô®
                this.element.appendChild(p);

                // Ëß¶ÂèëËæìÂÖ•‰∫ã‰ª∂
                this.triggerInput();

                // Âª∂ËøüËÆæÁΩÆÂÖâÊ†áÂíåËß¶ÂèëÊ°ÜÊû∂‰∫ã‰ª∂
                setTimeout(() => {
                    this.setCursorToEnd();
                    this.triggerFrameworkEvents();
                }, 100);

                // È¢ùÂ§ñÁöÑÂÖºÂÆπÊÄßÂ§ÑÁêÜ
                setTimeout(() => {
                    const inputEvent = new Event('input', { bubbles: true, cancelable: true });
                    this.element.dispatchEvent(inputEvent);

                    if (this.element._lexicalEditor) {
                        try {
                            this.element._lexicalEditor.update(() => {});
                        } catch (lexicalError) {
                            console.warn('LexicalÁºñËæëÂô®Êõ¥Êñ∞Â§±Ë¥•:', lexicalError);
                        }
                    }
                }, 200);

            } catch (e) {
                console.error('ËÆæÁΩÆKimiÁºñËæëÂô®ÊñáÊú¨Â§±Ë¥•:', e);
                this.element.textContent = text;
                this.triggerInput();
            }
        }

        setCursorToEnd() {
            try {
                const range = document.createRange();
                range.selectNodeContents(this.element);
                range.collapse(false);
                const selection = window.getSelection();
                if (selection) {
                    selection.removeAllRanges();
                    selection.addRange(range);
                }
            } catch (e) {
                console.warn('ËÆæÁΩÆÂÖâÊ†á‰ΩçÁΩÆÂ§±Ë¥•:', e);
            }
        }

        triggerInput() {
            ['input', 'change', 'keyup', 'blur'].forEach(eventType => {
                try {
                    const event = new Event(eventType, { bubbles: true, cancelable: true });
                    this.element.dispatchEvent(event);
                } catch (e) {
                    console.warn(`Ëß¶Âèë ${eventType} ‰∫ã‰ª∂Â§±Ë¥•:`, e);
                }
            });
            this.triggerFrameworkEvents();
        }

        triggerFrameworkEvents() {
            try {
                // React‰∫ã‰ª∂Ëß¶Âèë
                const reactKeys = Object.keys(this.element).filter(key =>
                    key.startsWith('__reactInternalInstance') || key.startsWith('__reactFiber')
                );
                if (reactKeys.length > 0) {
                    const event = new Event('input', { bubbles: true });
                    event.simulated = true;
                    this.element.dispatchEvent(event);
                }

                // Vue‰∫ã‰ª∂Ëß¶Âèë
                if (this.element.__vue__) {
                    const event = new CustomEvent('input', {
                        bubbles: true,
                        detail: { value: this.getInputText() }
                    });
                    this.element.dispatchEvent(event);
                }
            } catch (e) {
                console.warn('Ëß¶ÂèëÊ°ÜÊû∂‰∫ã‰ª∂Â§±Ë¥•:', e);
            }
        }
    }

    // ==================== ÊåâÈíÆÊ≥®ÂÖ•Áõ∏ÂÖ≥ ====================

    // ÂàõÂª∫Â¢ûÂº∫ÊåâÈíÆ
    function createEnhanceButton() {
        const button = document.createElement('div');
        button.setAttribute('role', 'button');
        button.setAttribute('tabindex', '0');
        button.className = 'prompt-enhancer-button';
        button.innerHTML = getButtonContent();
        button.title = '‰ΩøÁî®ÊñπÊ≥ïËÆ∫Â¢ûÂº∫ÊèêÁ§∫ËØç';
        button.setAttribute('data-testid', 'prompt-enhancer-button');

        button.addEventListener('click', handleEnhanceClick);
        button.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                e.stopPropagation();
                handleEnhanceClick();
            }
        });

        return button;
    }

    // Ëé∑ÂèñÊåâÈíÆÂÜÖÂÆπ
    function getButtonContent() {
        const icon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 2L13.09 8.26L22 9L13.09 9.74L12 16L10.91 9.74L2 9L10.91 8.26L12 2Z"/>
        </svg>`;

        return `${icon} <span>PÂ¢ûÂº∫</span>`;
    }

    // Ê≥®ÂÖ•ÊåâÈíÆÂà∞È°µÈù¢
    async function injectButton() {
        const siteConfig = SITE_CONFIGS[currentSiteType];
        if (!siteConfig) return false;

        const container = await waitForElement(siteConfig.buttonContainerSelector);
        if (!container) {
            console.warn('Êú™ÊâæÂà∞ÊåâÈíÆÂÆπÂô®');
            return false;
        }

        const inputElement = await waitForElement(siteConfig.inputSelector);
        if (!inputElement) {
            console.warn('Êú™ÊâæÂà∞ËæìÂÖ•ÂÖÉÁ¥†');
            return false;
        }

        inputHandler = new InputHandler(inputElement, siteConfig.inputType);
        enhanceButton = createEnhanceButton();

        // Ê†πÊçÆ‰∏çÂêåÁΩëÁ´ôË∞ÉÊï¥ÊåâÈíÆÊ†∑ÂºèÂíå‰ΩçÁΩÆ
        switch (currentSiteType) {
            case SiteType.DEEPSEEK:
                injectForDeepSeek(container);
                break;
            case SiteType.KIMI:
                injectForKimi(container);
                break;
            case SiteType.DOUBAO:
                injectForDoubao(container);
                break;
            default:
                container.appendChild(enhanceButton);
        }

        console.log('Â¢ûÂº∫ÊåâÈíÆÊ≥®ÂÖ•ÊàêÂäü');
        return true;
    }

    // DeepSeekÁΩëÁ´ôÁâπÊÆäÂ§ÑÁêÜ
    function injectForDeepSeek(container) {
        if (!enhanceButton) return;

        enhanceButton.style.cssText += `
            margin-right: 8px;
            cursor: pointer;
        `;

        container.appendChild(enhanceButton);
    }

    // KimiÁΩëÁ´ôÁâπÊÆäÂ§ÑÁêÜ
    function injectForKimi(container) {
        if (!enhanceButton) return;

        const wrapper = document.createElement('div');
        wrapper.className = 'researcher-switch-container';
        wrapper.style.cssText = `
            display: flex;
            align-items: center;
            margin-right: 8px;
        `;

        enhanceButton.style.cssText += `
            display: flex;
            align-items: center;
            gap: 6px;
            padding: 8px 12px;
            background: rgba(0, 0, 0, 0.05);
            border: none;
            border-radius: 16px;
            color: #666;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.2s ease, color 0.2s ease;
            white-space: nowrap;
        `;

        wrapper.appendChild(enhanceButton);
        container.appendChild(wrapper);
    }

    // Ë±ÜÂåÖÁΩëÁ´ôÁâπÊÆäÂ§ÑÁêÜ
    function injectForDoubao(container) {
        if (!enhanceButton) return;

        const deepThinkButton = container.querySelector('[data-testid="deep_think_select_button"]');
        if (deepThinkButton && deepThinkButton.parentElement) {
            deepThinkButton.parentElement.insertBefore(enhanceButton, deepThinkButton.nextSibling);
        } else {
            container.appendChild(enhanceButton);
        }

        enhanceButton.style.cssText += `
            flex-shrink: 0;
            margin-left: 8px;
            margin-right: 8px;
        `;
    }

    // ==================== ‰∫ã‰ª∂Â§ÑÁêÜ ====================

    // Â§ÑÁêÜÂ¢ûÂº∫ÊåâÈíÆÁÇπÂáª
    async function handleEnhanceClick() {
        if (!inputHandler) {
            console.error('ËæìÂÖ•Â§ÑÁêÜÂô®Êú™ÂàùÂßãÂåñ');
            showTooltip('Á≥ªÁªüÊú™ÂàùÂßãÂåñÔºåËØ∑Âà∑Êñ∞È°µÈù¢ÈáçËØï');
            return;
        }

        try {
            const userInput = inputHandler.getInputText();
            if (!userInput || userInput.trim().length === 0) {
                showTooltip('ËØ∑ÂÖàËæìÂÖ•ÂÜÖÂÆπ');
                return;
            }

            setButtonState(ButtonState.LOADING);
            setFloatingEnhancerState('loading');
            let knowledgeBaseStatus = 'Êú™‰ΩøÁî®';

            // ‰ªéÈ£û‰π¶Áü•ËØÜÂ∫ìÊ£ÄÁ¥¢Áõ∏ÂÖ≥ÊñπÊ≥ïËÆ∫
            console.log('Ê≠£Âú®Ê£ÄÁ¥¢Áü•ËØÜÂ∫ì...');
            let methodologyContext = '';
            let methodologyCount = 0;

            try {
                // Ê£ÄÊü•È£û‰π¶ÈÖçÁΩÆÊòØÂê¶ÂÆåÊï¥
                const hasFeishuConfig = FEISHU_CONFIG.APP_ID && FEISHU_CONFIG.APP_SECRET &&
                                       FEISHU_CONFIG.BASE_ID && FEISHU_CONFIG.TABLE_ID;

                if (hasFeishuConfig) {
                    const methodologies = await retrieveFromFeishu(userInput);
                    if (methodologies && methodologies.length > 0) {
                        methodologyContext = methodologies.map((m, index) =>
                            `„ÄêÁõ∏ÂÖ≥ÊñπÊ≥ïËÆ∫ ${index + 1}„Äë\nÊ†áÈ¢ò: ${m.title}\nÂä©ÊâãÂÜÖÂÆπ: ${m.assistant}\nÂÖ≥ÈîÆËØç: ${m.keywords}`
                        ).join('\n\n');
                        methodologyCount = methodologies.length;
                        knowledgeBaseStatus = `ÊâæÂà∞${methodologyCount}‰∏™Áõ∏ÂÖ≥ÊñπÊ≥ïËÆ∫`;
                        console.log('ÊâæÂà∞Áõ∏ÂÖ≥ÊñπÊ≥ïËÆ∫:', methodologyCount, '‰∏™');
                        console.log('ÊñπÊ≥ïËÆ∫‰∏ä‰∏ãÊñáÂÜÖÂÆπÈïøÂ∫¶:', methodologyContext.length);
                        console.log('ÊñπÊ≥ïËÆ∫‰∏ä‰∏ãÊñáÈ¢ÑËßà:', methodologyContext.substring(0, 300) + '...');
                    } else {
                        knowledgeBaseStatus = 'Êú™ÊâæÂà∞Áõ∏ÂÖ≥ÊñπÊ≥ïËÆ∫';
                        console.log('Êú™ÊâæÂà∞Áõ∏ÂÖ≥ÊñπÊ≥ïËÆ∫ÔºåÂ∞Ü‰ΩøÁî®Á∫ØAIÂ¢ûÂº∫');
                    }
                } else {
                    knowledgeBaseStatus = 'È£û‰π¶ÈÖçÁΩÆ‰∏çÂÆåÊï¥';
                    console.log('È£û‰π¶ÈÖçÁΩÆ‰∏çÂÆåÊï¥ÔºåË∑≥ËøáÁü•ËØÜÂ∫ìÊ£ÄÁ¥¢Ôºå‰ΩøÁî®Á∫ØAIÂ¢ûÂº∫');
                }
            } catch (error) {
                knowledgeBaseStatus = `Ê£ÄÁ¥¢Â§±Ë¥•: ${error.message}`;
                console.warn('Áü•ËØÜÂ∫ìÊ£ÄÁ¥¢Â§±Ë¥•:', error.message);
                console.log('Áü•ËØÜÂ∫ìÊ£ÄÁ¥¢Â§±Ë¥•ÔºåÂ∞ÜÁªßÁª≠‰ΩøÁî®Á∫ØAIÂ¢ûÂº∫');
            }

            // ‰ΩøÁî®AIÂ¢ûÂº∫ÊèêÁ§∫ËØç
            console.log('Ê≠£Âú®AIÂ¢ûÂº∫...');
            console.log('Áî®Êà∑ËæìÂÖ•:', userInput);
            console.log('ÊòØÂê¶ÊúâÊñπÊ≥ïËÆ∫‰∏ä‰∏ãÊñá:', methodologyContext ? 'ÊòØ' : 'Âê¶');
            try {
                const enhancedText = await enhancePromptWithAI(userInput, methodologyContext);
                console.log('AIÂ¢ûÂº∫ÂÆåÊàêÔºåÂ¢ûÂº∫ÂêéÊñáÊú¨ÈïøÂ∫¶:', enhancedText.length);
                console.log('Â¢ûÂº∫ÂêéÊñáÊú¨È¢ÑËßà:', enhancedText.substring(0, 200) + '...');

                // Ëá™Âä®Â§çÂà∂„ÄÅÊ∏ÖÁ©∫Âπ∂Á≤òË¥¥Â¢ûÂº∫ÂêéÁöÑÊñáÊú¨
                console.log('Ê≠£Âú®Â§çÂà∂Â¢ûÂº∫ÂêéÁöÑÊñáÊú¨Âà∞Ââ™ÂàáÊùø...');
                try {
                    // ‰ΩøÁî®Áé∞‰ª£Ââ™ÂàáÊùøAPIÂ§çÂà∂ÊñáÊú¨
                    if (navigator.clipboard && navigator.clipboard.writeText) {
                        await navigator.clipboard.writeText(enhancedText);
                        console.log('ÊñáÊú¨Â∑≤Â§çÂà∂Âà∞Ââ™ÂàáÊùø');
                    } else {
                        // ÂõûÈÄÄÂà∞‰º†ÁªüÊñπÊ≥ï
                        const textArea = document.createElement('textarea');
                        textArea.value = enhancedText;
                        textArea.style.position = 'fixed';
                        textArea.style.left = '-999999px';
                        textArea.style.top = '-999999px';
                        document.body.appendChild(textArea);
                        textArea.focus();
                        textArea.select();
                        document.execCommand('copy');
                        document.body.removeChild(textArea);
                        console.log('ÊñáÊú¨Â∑≤Â§çÂà∂Âà∞Ââ™ÂàáÊùøÔºà‰º†ÁªüÊñπÊ≥ïÔºâ');
                    }

                    // Á´ãÂç≥Ê∏ÖÁ©∫ËæìÂÖ•Ê°ÜÂπ∂‰ΩøÁî®Ââ™ÂàáÊùøÁ≤òË¥¥
                    console.log('Ê≠£Âú®Ê∏ÖÁ©∫ËæìÂÖ•Ê°ÜÂπ∂‰ΩøÁî®Ââ™ÂàáÊùøÁ≤òË¥¥...');

                    // ËÅöÁÑ¶ËæìÂÖ•Ê°Ü
                    inputHandler.focus();
                    await new Promise(resolve => setTimeout(resolve, 100));

                    // ÂÖ®ÈÄâÂΩìÂâçËæìÂÖ•Ê°ÜÂÜÖÂÆπ
                    console.log('Ê≠£Âú®ÂÖ®ÈÄâËæìÂÖ•Ê°ÜÂÜÖÂÆπ...');
                    if (inputHandler.inputType === 'textarea') {
                        inputHandler.element.select();
                    } else {
                        // ÂØπ‰∫écontenteditableÔºå‰ΩøÁî®Selection APIÂÖ®ÈÄâ
                        const range = document.createRange();
                        range.selectNodeContents(inputHandler.element);
                        const selection = window.getSelection();
                        if (selection) {
                            selection.removeAllRanges();
                            selection.addRange(range);
                        }
                    }
                    await new Promise(resolve => setTimeout(resolve, 100));

                    // ‰ΩøÁî®Ââ™ÂàáÊùøÁ≤òË¥¥ÊõøÊç¢ÈÄâ‰∏≠ÂÜÖÂÆπ
                    console.log('Ê≠£Âú®‰ΩøÁî®Ââ™ÂàáÊùøÁ≤òË¥¥...');
                    try {
                        // Â∞ùËØï‰ΩøÁî®Áé∞‰ª£Ââ™ÂàáÊùøAPIÁ≤òË¥¥
                        if (navigator.clipboard && navigator.clipboard.readText) {
                            const clipboardText = await navigator.clipboard.readText();
                            if (clipboardText === enhancedText) {
                                // Ê®°ÊãüCtrl+VÁ≤òË¥¥
                                const pasteEvent = new KeyboardEvent('keydown', {
                                    key: 'v',
                                    code: 'KeyV',
                                    ctrlKey: true,
                                    bubbles: true,
                                    cancelable: true
                                });
                                inputHandler.element.dispatchEvent(pasteEvent);

                                // ‰πüÂ∞ùËØïpaste‰∫ã‰ª∂
                                const clipboardData = new DataTransfer();
                                clipboardData.setData('text/plain', enhancedText);
                                const pasteEventClipboard = new ClipboardEvent('paste', {
                                    clipboardData: clipboardData,
                                    bubbles: true,
                                    cancelable: true
                                });
                                inputHandler.element.dispatchEvent(pasteEventClipboard);
                            }
                        }

                        // Á≠âÂæÖÁ≤òË¥¥ÂÆåÊàê
                        await new Promise(resolve => setTimeout(resolve, 300));

                        // È™åËØÅÁ≤òË¥¥ÁªìÊûú
                        const finalText = inputHandler.getInputText();
                        if (finalText.includes(enhancedText.substring(0, 100))) {
                            console.log('Ââ™ÂàáÊùøÁ≤òË¥¥Êìç‰ΩúÊàêÂäüÂÆåÊàê');
                        } else {
                            console.warn('Ââ™ÂàáÊùøÁ≤òË¥¥Â§±Ë¥•ÔºåÂõûÈÄÄÂà∞Áõ¥Êé•ËÆæÁΩÆÊñáÊú¨');
                            // ÂõûÈÄÄÂà∞Áõ¥Êé•ËÆæÁΩÆÊñáÊú¨
                            inputHandler.setInputText(enhancedText);
                        }

                    } catch (clipboardPasteError) {
                        console.warn('Ââ™ÂàáÊùøÁ≤òË¥¥Â§±Ë¥•ÔºåÂõûÈÄÄÂà∞Áõ¥Êé•ËÆæÁΩÆÊñáÊú¨:', clipboardPasteError);
                        // ÂõûÈÄÄÂà∞Áõ¥Êé•ËÆæÁΩÆÊñáÊú¨
                        inputHandler.setInputText(enhancedText);
                    }

                } catch (error) {
                    console.error('Ëá™Âä®Â§çÂà∂Á≤òË¥¥Â§±Ë¥•:', error);
                    // ÂõûÈÄÄÂà∞Áõ¥Êé•ËÆæÁΩÆÊñáÊú¨
                    inputHandler.setInputText(enhancedText);
                    inputHandler.focus();
                }

                setButtonState(ButtonState.SUCCESS);
                setFloatingEnhancerState('success');

                // ÊòæÁ§∫Â¢ûÂº∫ÁªìÊûú‰ø°ÊÅØ
                const successMessage = methodologyCount > 0
                    ? `Â¢ûÂº∫ÂÆåÊàêÔºÅÂ∑≤Ëá™Âä®Â§çÂà∂Âπ∂Á≤òË¥¥Ôºà‰ΩøÁî®‰∫Ü${methodologyCount}‰∏™ÊñπÊ≥ïËÆ∫Ôºâ`
                    : 'Â¢ûÂº∫ÂÆåÊàêÔºÅÂ∑≤Ëá™Âä®Â§çÂà∂Âπ∂Á≤òË¥¥ÔºàÁ∫ØAIÂ¢ûÂº∫Ôºâ';
                showTooltip(successMessage);

                setTimeout(() => {
                    setButtonState(ButtonState.NORMAL);
                    setFloatingEnhancerState('normal');
                }, 2000);

                console.log(`Â¢ûÂº∫ÂÆåÊàê - Áü•ËØÜÂ∫ìÁä∂ÊÄÅ: ${knowledgeBaseStatus}`);

            } catch (aiError) {
                console.error('AIÂ¢ûÂº∫Â§±Ë¥•:', aiError);
                setButtonState(ButtonState.ERROR);
                setFloatingEnhancerState('error');

                // Êèê‰æõÊõ¥ËØ¶ÁªÜÁöÑÈîôËØØ‰ø°ÊÅØ
                let errorMessage = 'AIÂ¢ûÂº∫Â§±Ë¥•';
                if (aiError.message) {
                    if (aiError.message.includes('API')) {
                        errorMessage = 'AI APIË∞ÉÁî®Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÈÖçÁΩÆ';
                    } else if (aiError.message.includes('ÁΩëÁªú')) {
                        errorMessage = 'ÁΩëÁªúËøûÊé•Â§±Ë¥•ÔºåËØ∑ÈáçËØï';
                    } else {
                        errorMessage = `AIÂ¢ûÂº∫Â§±Ë¥•: ${aiError.message}`;
                    }
                }

                showTooltip(errorMessage);

                setTimeout(() => {
                    setButtonState(ButtonState.NORMAL);
                    setFloatingEnhancerState('normal');
                }, 3000);

                throw aiError; // ÈáçÊñ∞ÊäõÂá∫ÈîôËØØ‰ª•‰æøÂ§ñÂ±ÇcatchÂ§ÑÁêÜ
            }

        } catch (error) {
            console.error('Â¢ûÂº∫Â§ÑÁêÜÂ§±Ë¥•:', error);

            // Â¶ÇÊûúËøòÊ≤°ÊúâËÆæÁΩÆÈîôËØØÁä∂ÊÄÅÔºåËÆæÁΩÆÂÆÉ
            if (!enhanceButton?.classList.contains('pe-error')) {
                setButtonState(ButtonState.ERROR);
                setFloatingEnhancerState('error');
                showTooltip('Â¢ûÂº∫Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
                setTimeout(() => {
                    setButtonState(ButtonState.NORMAL);
                    setFloatingEnhancerState('normal');
                }, 3000);
            }
        }
    }

    // ËÆæÁΩÆÊåâÈíÆÁä∂ÊÄÅ
    function setButtonState(state) {
        if (!enhanceButton) return;

        enhanceButton.classList.remove('pe-loading', 'pe-success', 'pe-error');

        switch (state) {
            case ButtonState.LOADING:
                enhanceButton.classList.add('pe-loading');
                enhanceButton.disabled = true;
                updateButtonContent('Â¢ûÂº∫‰∏≠...');
                break;
            case ButtonState.SUCCESS:
                enhanceButton.classList.add('pe-success');
                enhanceButton.disabled = false;
                updateButtonContent('‚úì Â∑≤Â¢ûÂº∫');
                break;
            case ButtonState.ERROR:
                enhanceButton.classList.add('pe-error');
                enhanceButton.disabled = false;
                updateButtonContent('√ó Â§±Ë¥•');
                break;
            default:
                enhanceButton.disabled = false;
                enhanceButton.innerHTML = getButtonContent();
        }
    }

    // Êõ¥Êñ∞ÊåâÈíÆÂÜÖÂÆπ
    function updateButtonContent(text) {
        if (!enhanceButton) return;

        const icon = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 2L13.09 8.26L22 9L13.09 9.74L12 16L10.91 9.74L2 9L10.91 8.26L12 2Z"/>
        </svg>`;

        enhanceButton.innerHTML = `${icon} <span>${text}</span>`;
    }

    // ÊòæÁ§∫ÊèêÁ§∫
    function showTooltip(message) {
        if (!enhanceButton) return;

        const tooltip = document.createElement('div');
        tooltip.className = 'pe-tooltip';
        tooltip.textContent = message;

        enhanceButton.style.position = 'relative';
        enhanceButton.appendChild(tooltip);

        setTimeout(() => {
            tooltip.remove();
        }, 3000);
    }

    // ==================== ÈÖçÁΩÆÈù¢Êùø ====================

    // ÂàõÂª∫ÈÖçÁΩÆÈù¢Êùø
    function createConfigPanel() {
        // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®ÈÖçÁΩÆÈù¢Êùø
        const existingPanel = document.querySelector('.pe-config-panel');
        if (existingPanel) {
            existingPanel.remove();
        }

        const panel = document.createElement('div');
        panel.className = 'pe-config-panel';
        // ÂàõÂª∫ÈÖçÁΩÆÈù¢ÊùøHTMLÁªìÊûÑ
        const headerDiv = document.createElement('div');
        headerDiv.className = 'pe-config-header';
        headerDiv.innerHTML = '<h2>AIÊèêÁ§∫ËØçÂ¢ûÂº∫Âô® - ÈÖçÁΩÆ</h2><button class="pe-close-btn">√ó</button>';

        const contentDiv = document.createElement('div');
        contentDiv.className = 'pe-config-content';

        // È£û‰π¶ÈÖçÁΩÆÂå∫Âüü
        const feishuSection = document.createElement('div');
        feishuSection.className = 'pe-config-section';
        feishuSection.innerHTML = `
            <h3>È£û‰π¶Â§öÁª¥Ë°®Ê†ºÈÖçÁΩÆ</h3>
            <div class="pe-form-group">
                <label>App ID:</label>
                <input type="text" id="feishu-app-id" placeholder="ËØ∑ËæìÂÖ•È£û‰π¶Â∫îÁî®ÁöÑApp ID">
            </div>
            <div class="pe-form-group">
                <label>App Secret:</label>
                <input type="password" id="feishu-app-secret" placeholder="ËØ∑ËæìÂÖ•È£û‰π¶Â∫îÁî®ÁöÑApp Secret">
            </div>
            <div class="pe-form-group">
                <label>È£û‰π¶Ë°®Ê†ºURL (ÂèØÈÄâ):</label>
                <input type="text" id="feishu-table-url" placeholder="ËæìÂÖ•ÂÆåÊï¥ÁöÑÈ£û‰π¶Â§öÁª¥Ë°®Ê†ºURLÔºåÂ∞ÜËá™Âä®Ëß£ÊûêBase IDÂíåTable ID">
                <small style="color: #666; font-size: 12px; display: block; margin-top: 4px;">‰æãÂ¶Ç: https://example.feishu.cn/base/T1M4bzmLLarNLhs5jcEcwAcRn8Q?table=tbliBckxa87pskV8</small>
            </div>
            <div class="pe-form-group">
                <label>Base ID:</label>
                <input type="text" id="feishu-base-id" placeholder="ËØ∑ËæìÂÖ•Â§öÁª¥Ë°®Ê†ºÁöÑBase ID">
            </div>
            <div class="pe-form-group">
                <label>Table ID:</label>
                <input type="text" id="feishu-table-id" placeholder="ËØ∑ËæìÂÖ•Êï∞ÊçÆË°®ÁöÑTable ID">
            </div>
        `;

        // AIÈÖçÁΩÆÂå∫Âüü
        const aiSection = document.createElement('div');
        aiSection.className = 'pe-config-section';
        aiSection.innerHTML = `
            <h3>AIÊ®°ÂûãÈÖçÁΩÆ</h3>
            <div class="pe-form-group">
                <label>Ê®°ÂûãÂêçÁß∞:</label>
                <input type="text" id="ai-model-name" placeholder="Â¶Ç: moonshot-v1-8k">
            </div>
            <div class="pe-form-group">
                <label>API Base URL:</label>
                <input type="text" id="ai-base-url" placeholder="Â¶Ç: https://api.moonshot.cn/v1">
            </div>
            <div class="pe-form-group">
                <label>API Key:</label>
                <input type="password" id="ai-api-key" placeholder="ËØ∑ËæìÂÖ•AIÊ®°ÂûãÁöÑAPI Key">
            </div>
        `;

        // ÊåâÈíÆÂå∫Âüü
        const buttonSection = document.createElement('div');
        buttonSection.className = 'pe-config-section';
        buttonSection.innerHTML = `
            <button class="pe-button pe-button-primary" id="save-config-btn">‰øùÂ≠òÈÖçÁΩÆ</button>
            <button class="pe-button pe-button-secondary" id="test-config-btn">ÊµãËØïËøûÊé•</button>
        `;

        // ÁªÑË£ÖÈù¢Êùø
        contentDiv.appendChild(feishuSection);
        contentDiv.appendChild(aiSection);
        contentDiv.appendChild(buttonSection);

        panel.appendChild(headerDiv);
        panel.appendChild(contentDiv);

        // ËÆæÁΩÆÂΩìÂâçÈÖçÁΩÆÂÄº
        setTimeout(() => {
            const appIdInput = document.getElementById('feishu-app-id');
            const appSecretInput = document.getElementById('feishu-app-secret');
            const tableUrlInput = document.getElementById('feishu-table-url');
            const baseIdInput = document.getElementById('feishu-base-id');
            const tableIdInput = document.getElementById('feishu-table-id');
            const modelNameInput = document.getElementById('ai-model-name');
            const baseUrlInput = document.getElementById('ai-base-url');
            const apiKeyInput = document.getElementById('ai-api-key');

            if (appIdInput) appIdInput.value = FEISHU_CONFIG.APP_ID || '';
            if (appSecretInput) appSecretInput.value = FEISHU_CONFIG.APP_SECRET || '';
            if (tableUrlInput) tableUrlInput.value = GM_getValue('feishu_table_url', '') || '';
            if (baseIdInput) baseIdInput.value = FEISHU_CONFIG.BASE_ID || '';
            if (tableIdInput) tableIdInput.value = FEISHU_CONFIG.TABLE_ID || '';
            if (modelNameInput) modelNameInput.value = AI_CONFIG.MODEL_NAME || '';
            if (baseUrlInput) baseUrlInput.value = AI_CONFIG.BASE_URL || '';
            if (apiKeyInput) apiKeyInput.value = AI_CONFIG.API_KEY || '';

            // Ê∑ªÂä†URLËæìÂÖ•Ê°ÜÁöÑ‰∫ã‰ª∂ÁõëÂê¨Âô®
            if (tableUrlInput) {
                tableUrlInput.addEventListener('input', function() {
                    const url = this.value.trim();
                    if (url) {
                        try {
                            const { baseId, tableId } = parseFeishuUrl(url);
                            if (baseIdInput) baseIdInput.value = baseId;
                            if (tableIdInput) tableIdInput.value = tableId;

                            // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
                            const small = this.nextElementSibling;
                            if (small) {
                                small.style.color = '#28a745';
                                small.textContent = `‚úì Ëß£ÊûêÊàêÂäü: Base ID=${baseId}, Table ID=${tableId}`;
                                setTimeout(() => {
                                    small.style.color = '#666';
                                    small.textContent = '‰æãÂ¶Ç: https://example.feishu.cn/base/T1M4bzmLLarNLhs5jcEcwAcRn8Q?table=tbliBckxa87pskV8';
                                }, 3000);
                            }
                        } catch (error) {
                            // ÊòæÁ§∫ÈîôËØØÊèêÁ§∫
                            const small = this.nextElementSibling;
                            if (small) {
                                small.style.color = '#dc3545';
                                small.textContent = `‚úó ${error.message}`;
                                setTimeout(() => {
                                    small.style.color = '#666';
                                    small.textContent = '‰æãÂ¶Ç: https://example.feishu.cn/base/T1M4bzmLLarNLhs5jcEcwAcRn8Q?table=tbliBckxa87pskV8';
                                }, 3000);
                            }
                        }
                    }
                });
            }
        }, 100);

        document.body.appendChild(panel);

        // ÁªëÂÆöÂÖ≥Èó≠ÊåâÈíÆ‰∫ã‰ª∂
        const closeBtn = panel.querySelector('.pe-close-btn');
        closeBtn.addEventListener('click', () => {
            panel.remove();
        });

        // ÁªëÂÆö‰øùÂ≠òÈÖçÁΩÆÊåâÈíÆ‰∫ã‰ª∂
        const saveBtn = panel.querySelector('#save-config-btn');
        saveBtn.addEventListener('click', function() {
            try {
                const appId = document.getElementById('feishu-app-id').value.trim();
                const appSecret = document.getElementById('feishu-app-secret').value.trim();
                const tableUrl = document.getElementById('feishu-table-url').value.trim();
                const baseId = document.getElementById('feishu-base-id').value.trim();
                const tableId = document.getElementById('feishu-table-id').value.trim();
                const modelName = document.getElementById('ai-model-name').value.trim();
                const baseUrl = document.getElementById('ai-base-url').value.trim();
                const apiKey = document.getElementById('ai-api-key').value.trim();

                // Â¶ÇÊûúÊúâURL‰ΩÜÊ≤°ÊúâÊâãÂä®Â°´ÂÜôBase IDÂíåTable IDÔºåÂ∞ùËØï‰ªéURLËß£Êûê
                let finalBaseId = baseId;
                let finalTableId = tableId;

                if (tableUrl && (!baseId || !tableId)) {
                    try {
                        const parsed = parseFeishuUrl(tableUrl);
                        if (!baseId) finalBaseId = parsed.baseId;
                        if (!tableId) finalTableId = parsed.tableId;
                    } catch (error) {
                        console.warn('URLËß£ÊûêÂ§±Ë¥•:', error.message);
                    }
                }

                // ‰øùÂ≠òÂà∞GMÂ≠òÂÇ®
                GM_setValue('feishu_app_id', appId);
                GM_setValue('feishu_app_secret', appSecret);
                GM_setValue('feishu_table_url', tableUrl);
                GM_setValue('feishu_base_id', finalBaseId);
                GM_setValue('feishu_table_id', finalTableId);
                GM_setValue('ai_model_name', modelName);
                GM_setValue('ai_base_url', baseUrl);
                GM_setValue('ai_api_key', apiKey);

                // Ê∏ÖÈô§ËÆøÈóÆ‰ª§ÁâåÁºìÂ≠ò
                accessTokenCache = { token: null, expireTime: 0 };

                console.log('ÈÖçÁΩÆÂ∑≤‰øùÂ≠ò');

                // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        title: '‰øùÂ≠òÊàêÂäü',
                        text: 'ÈÖçÁΩÆÂ∑≤‰øùÂ≠ò',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });
                } else {
                    alert('ÈÖçÁΩÆ‰øùÂ≠òÊàêÂäüÔºÅ');
                }
            } catch (error) {
                console.error('‰øùÂ≠òÈÖçÁΩÆÂ§±Ë¥•:', error);
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        title: '‰øùÂ≠òÂ§±Ë¥•',
                        text: error.message,
                        icon: 'error'
                    });
                } else {
                    alert('‰øùÂ≠òÈÖçÁΩÆÂ§±Ë¥•: ' + error.message);
                }
            }
        });

        // ÁªëÂÆöÊµãËØïÈÖçÁΩÆÊåâÈíÆ‰∫ã‰ª∂
        const testBtn = panel.querySelector('#test-config-btn');
        testBtn.addEventListener('click', async function() {
            try {
                console.log('ÂºÄÂßãÊµãËØïÈÖçÁΩÆ...');

                // ÊòæÁ§∫ÊµãËØï‰∏≠ÊèêÁ§∫
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        title: 'ÊµãËØï‰∏≠...',
                        text: 'Ê≠£Âú®ÊµãËØïËøûÊé•',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });
                }

                // ÊµãËØïÈ£û‰π¶ËøûÊé•
                const token = await getFeishuAccessToken();
                console.log('È£û‰π¶ËøûÊé•ÊµãËØïÊàêÂäü');

                // ÊµãËØïÂ≠óÊÆµÊ£ÄÊü•ÂíåÂàõÂª∫
                try {
                    await ensureRequiredFields(FEISHU_CONFIG.BASE_ID, FEISHU_CONFIG.TABLE_ID, token);
                    console.log('È£û‰π¶Â≠óÊÆµÊ£ÄÊü•ÊàêÂäü');
                } catch (fieldError) {
                    console.warn('Â≠óÊÆµÊ£ÄÊü•Â§±Ë¥•:', fieldError.message);
                }

                // ÊµãËØïAIËøûÊé•
                await enhancePromptWithAI('ÊµãËØïËøûÊé•', '');
                console.log('AIËøûÊé•ÊµãËØïÊàêÂäü');

                // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        title: 'ÊµãËØïÊàêÂäü',
                        text: 'ÊâÄÊúâÈÖçÁΩÆÈÉΩÊ≠£Â∏∏Â∑•‰Ωú',
                        icon: 'success'
                    });
                } else {
                    alert('ÊµãËØïÊàêÂäüÔºÅÊâÄÊúâÈÖçÁΩÆÈÉΩÊ≠£Â∏∏Â∑•‰Ωú');
                }
            } catch (error) {
                console.error('ÊµãËØïÈÖçÁΩÆÂ§±Ë¥•:', error);
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        title: 'ÊµãËØïÂ§±Ë¥•',
                        text: error.message,
                        icon: 'error'
                    });
                } else {
                    alert('ÊµãËØïÂ§±Ë¥•: ' + error.message);
                }
            }
        });
    }

    // ==================== ‰∏ªÂàùÂßãÂåñÈÄªËæë ====================

    // ‰∏ªÂàùÂßãÂåñÂáΩÊï∞
    async function init() {
        try {
            console.log('üöÄ ÂºÄÂßãÂàùÂßãÂåñAIÊèêÁ§∫ËØçÂ¢ûÂº∫Âô®...');
            currentSiteType = detectSiteType();
            console.log('üéØ ÂΩìÂâçÁΩëÁ´ôÁ±ªÂûã:', currentSiteType);

            if (currentSiteType === SiteType.UNKNOWN) {
                console.log('‚ùå ÂΩìÂâçÁΩëÁ´ô‰∏çÂèóÊîØÊåÅÔºåÂàùÂßãÂåñÁªàÊ≠¢');
                return;
            }

            const chatPageResult = isChatPage();
            console.log('üìÑ ËÅäÂ§©È°µÈù¢Ê£ÄÊü•ÁªìÊûú:', chatPageResult);
            if (!chatPageResult) {
                console.log('‚è≥ ÂΩìÂâçÈ°µÈù¢‰∏çÊòØËÅäÂ§©È°µÈù¢ÔºåËÆæÁΩÆÈ°µÈù¢ÂèòÂåñÁõëÂê¨...');
                setupPageChangeListener();
                return;
            }

            console.log(`‚úÖ AIÊèêÁ§∫ËØçÂ¢ûÂº∫Âô®Â∑≤Âä†ËΩΩÔºåÁΩëÁ´ôÁ±ªÂûã: ${currentSiteType}`);
            console.log('üîß ÂºÄÂßãÊ∑ªÂä†Ê†∑ÂºèÂíåÂàùÂßãÂåñÁªÑ‰ª∂...');

            // Ê∑ªÂä†Ê†∑Âºè
            addStyles();

            // Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩÂÆåÊàê
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', initializeEnhancer);
            } else {
                await initializeEnhancer();
            }

        } catch (error) {
            console.error('ÂàùÂßãÂåñÂ§±Ë¥•:', error);
        }
    }

    // ÂàùÂßãÂåñÂ¢ûÂº∫Âô®
    async function initializeEnhancer() {
        if (isInitialized) return;

        try {
            console.log('Á≠âÂæÖÈ°µÈù¢ÂÖÉÁ¥†Âä†ËΩΩ...');

            const success = await injectButton();
            if (success) {
                isInitialized = true;
                console.log('AIÊèêÁ§∫ËØçÂ¢ûÂº∫Âô®ÂàùÂßãÂåñÂÆåÊàê');

                // ËÆæÁΩÆÈ°µÈù¢ÂèòÂåñÁõëÂê¨
                setupMutationObserver();

                // Ê∑ªÂä†Âø´Êç∑ÈîÆÊîØÊåÅ
                setupKeyboardShortcuts();

                // Ê£ÄÊü•ÈÖçÁΩÆÂÆåÊï¥ÊÄß
                checkConfigCompleteness();
            } else {
                console.warn('ÊåâÈíÆÊ≥®ÂÖ•Â§±Ë¥•ÔºåÂ∞ÜÂú®È°µÈù¢ÂèòÂåñÊó∂ÈáçËØï');
                setupRetryMechanism();
            }
        } catch (error) {
            console.error('Â¢ûÂº∫Âô®ÂàùÂßãÂåñÂ§±Ë¥•:', error);
            setupRetryMechanism();
        }
    }

    // ËÆæÁΩÆÈ°µÈù¢ÂèòÂåñÁõëÂê¨
    function setupPageChangeListener() {
        let currentUrl = window.location.href;

        const checkUrlChange = () => {
            if (window.location.href !== currentUrl) {
                currentUrl = window.location.href;
                if (isChatPage()) {
                    console.log('Ê£ÄÊµãÂà∞Ë∑≥ËΩ¨Âà∞ËÅäÂ§©È°µÈù¢ÔºåÂºÄÂßãÂàùÂßãÂåñ...');
                    isInitialized = false;
                    setTimeout(() => initializeEnhancer(), 1000);
                }
            }
        };

        setInterval(checkUrlChange, 1000);

        // ÁõëÂê¨popstate‰∫ã‰ª∂
        window.addEventListener('popstate', () => {
            setTimeout(checkUrlChange, 100);
        });
    }

    // ËÆæÁΩÆDOMÂèòÂåñÁõëÂê¨
    function setupMutationObserver() {
        const observer = new MutationObserver((mutations) => {
            let shouldReinject = false;

            mutations.forEach((mutation) => {
                if (mutation.type === 'childList') {
                    // Ê£ÄÊü•ÊåâÈíÆÊòØÂê¶ËøòÂú®È°µÈù¢‰∏≠
                    if (enhanceButton && !document.contains(enhanceButton)) {
                        shouldReinject = true;
                    }
                }
            });

            if (shouldReinject) {
                console.log('Ê£ÄÊµãÂà∞È°µÈù¢ÂèòÂåñÔºåÈáçÊñ∞Ê≥®ÂÖ•ÊåâÈíÆ...');
                setTimeout(() => {
                    isInitialized = false;
                    initializeEnhancer();
                }, 500);
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }

    // ËÆæÁΩÆÈáçËØïÊú∫Âà∂
    function setupRetryMechanism() {
        setTimeout(() => {
            if (!isInitialized) {
                console.log('ÈáçËØïÂàùÂßãÂåñ...');
                initializeEnhancer();
            }
        }, 3000);
    }

    // ËÆæÁΩÆÈîÆÁõòÂø´Êç∑ÈîÆ
    function setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + Shift + P ÊâìÂºÄÈÖçÁΩÆÈù¢Êùø
            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'P') {
                e.preventDefault();
                createConfigPanel();
            }

            // Ctrl/Cmd + Enter Ëß¶ÂèëÂ¢ûÂº∫
            if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                const activeElement = document.activeElement;
                const siteConfig = SITE_CONFIGS[currentSiteType];
                if (siteConfig && activeElement && activeElement.matches(siteConfig.inputSelector)) {
                    e.preventDefault();
                    handleEnhanceClick();
                }
            }
        });
    }

    // Ê£ÄÊü•ÈÖçÁΩÆÂÆåÊï¥ÊÄß
    function checkConfigCompleteness() {
        const hasFeishuConfig = FEISHU_CONFIG.APP_ID && FEISHU_CONFIG.APP_SECRET &&
                               FEISHU_CONFIG.BASE_ID && FEISHU_CONFIG.TABLE_ID;
        const hasAIConfig = AI_CONFIG.API_KEY && AI_CONFIG.BASE_URL && AI_CONFIG.MODEL_NAME;

        if (!hasFeishuConfig || !hasAIConfig) {
            setTimeout(() => {
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        title: 'ÈÖçÁΩÆ‰∏çÂÆåÊï¥',
                        text: 'ËØ∑ÂÖàÈÖçÁΩÆÈ£û‰π¶Â§öÁª¥Ë°®Ê†ºÂíåAIÊ®°Âûã‰ø°ÊÅØ„ÄÇÊåâ Ctrl+Shift+P ÊâìÂºÄÈÖçÁΩÆÈù¢Êùø„ÄÇ',
                        icon: 'warning',
                        confirmButtonText: 'ÊâìÂºÄÈÖçÁΩÆ',
                        showCancelButton: true,
                        cancelButtonText: 'Á®çÂêéÈÖçÁΩÆ'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            createConfigPanel();
                        }
                    });
                }
            }, 2000);
        }
    }

    // ==================== ÊñáÁ´†ÈááÈõÜÂäüËÉΩ ====================

    // ÈááÈõÜÂΩìÂâçÈ°µÈù¢ÂÜÖÂÆπÂà∞È£û‰π¶Áü•ËØÜÂ∫ì
    async function collectCurrentPage() {
        try {
            // Ê£ÄÊü•È£û‰π¶ÈÖçÁΩÆ
            const hasFeishuConfig = FEISHU_CONFIG.APP_ID && FEISHU_CONFIG.APP_SECRET &&
                                   FEISHU_CONFIG.BASE_ID && FEISHU_CONFIG.TABLE_ID;

            if (!hasFeishuConfig) {
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        title: 'ÈÖçÁΩÆ‰∏çÂÆåÊï¥',
                        text: 'ËØ∑ÂÖàÈÖçÁΩÆÈ£û‰π¶Â§öÁª¥Ë°®Ê†º‰ø°ÊÅØ',
                        icon: 'warning',
                        confirmButtonText: 'ÊâìÂºÄÈÖçÁΩÆ'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            createConfigPanel();
                        }
                    });
                } else {
                    alert('ËØ∑ÂÖàÈÖçÁΩÆÈ£û‰π¶Â§öÁª¥Ë°®Ê†º‰ø°ÊÅØ');
                }
                return;
            }

            // ÊòæÁ§∫ÈááÈõÜ‰∏≠ÊèêÁ§∫
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    title: 'ÈááÈõÜ‰∏≠...',
                    text: 'Ê≠£Âú®ÈááÈõÜÈ°µÈù¢ÂÜÖÂÆπÂà∞È£û‰π¶Áü•ËØÜÂ∫ì',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
            }

            // Ëé∑ÂèñÈ°µÈù¢‰ø°ÊÅØ
            const title = document.title || 'Êú™Áü•Ê†áÈ¢ò';
            const url = window.location.href;
            const content = extractPageContent();
            const keywords = extractKeywords(content);

            // ÊûÑÂª∫Ë¶Å‰øùÂ≠òÁöÑÂÜÖÂÆπ
            const fullContent = `Êù•Ê∫êÔºö${url}\n\n${content}`;

            // ‰øùÂ≠òÂà∞È£û‰π¶
            await addToFeishu(title, fullContent, keywords);

            // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    title: 'ÈááÈõÜÊàêÂäü',
                    text: `Â∑≤Â∞Ü„Äå${title}„ÄçÈááÈõÜÂà∞È£û‰π¶Áü•ËØÜÂ∫ì`,
                    icon: 'success',
                    timer: 3000,
                    showConfirmButton: false
                });
            } else {
                alert(`ÈááÈõÜÊàêÂäüÔºÅÂ∑≤Â∞Ü„Äå${title}„Äç‰øùÂ≠òÂà∞È£û‰π¶Áü•ËØÜÂ∫ì`);
            }

        } catch (error) {
            console.error('ÈááÈõÜÈ°µÈù¢Â§±Ë¥•:', error);
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    title: 'ÈááÈõÜÂ§±Ë¥•',
                    text: error.message,
                    icon: 'error'
                });
            } else {
                alert('ÈááÈõÜÂ§±Ë¥•: ' + error.message);
            }
        }
    }

    // ÊèêÂèñÈ°µÈù¢‰∏ªË¶ÅÂÜÖÂÆπ
    function extractPageContent() {
        // Â∞ùËØïËé∑ÂèñÊñáÁ´†‰∏ª‰ΩìÂÜÖÂÆπ
        const selectors = [
            'article',
            '[role="main"]',
            '.content',
            '.article-content',
            '.post-content',
            '.entry-content',
            'main',
            '#content',
            '.markdown-body'
        ];

        let content = '';

        for (const selector of selectors) {
            const element = document.querySelector(selector);
            if (element) {
                content = element.innerText || element.textContent || '';
                if (content.trim().length > 100) {
                    break;
                }
            }
        }

        // Â¶ÇÊûúÊ≤°ÊúâÊâæÂà∞ÂêàÈÄÇÁöÑÂÜÖÂÆπÔºå‰ΩøÁî®bodyÂÜÖÂÆπ‰ΩÜËøáÊª§ÊéâÂØºËà™Á≠â
        if (!content || content.trim().length < 100) {
            const body = document.body.cloneNode(true);

            // ÁßªÈô§‰∏çÈúÄË¶ÅÁöÑÂÖÉÁ¥†
            const removeSelectors = [
                'nav', 'header', 'footer', 'aside',
                '.nav', '.header', '.footer', '.sidebar',
                '.menu', '.navigation', '.ads', '.advertisement'
            ];

            removeSelectors.forEach(selector => {
                const elements = body.querySelectorAll(selector);
                elements.forEach(el => el.remove());
            });

            content = body.innerText || body.textContent || '';
        }

        // Ê∏ÖÁêÜÂÜÖÂÆπ
        content = content
            .replace(/\s+/g, ' ')  // Â§ö‰∏™Á©∫ÁôΩÂ≠óÁ¨¶ÊõøÊç¢‰∏∫Âçï‰∏™Á©∫Ê†º
            .replace(/\n\s*\n/g, '\n')  // Â§ö‰∏™Êç¢Ë°åÊõøÊç¢‰∏∫Âçï‰∏™Êç¢Ë°å
            .trim();

        // ÈôêÂà∂ÈïøÂ∫¶
        if (content.length > 5000) {
            content = content.substring(0, 5000) + '...';
        }

        return content;
    }

    // ÊèêÂèñÂÖ≥ÈîÆËØç
    function extractKeywords(content) {
        // ÁÆÄÂçïÁöÑÂÖ≥ÈîÆËØçÊèêÂèñ
        const title = document.title || '';
        const url = window.location.href;

        let keywords = [];

        // ‰ªéÊ†áÈ¢òÊèêÂèñ
        if (title) {
            keywords.push(title.split(/[\s\-_|]+/).filter(word => word.length > 1).slice(0, 3));
        }

        // ‰ªéURLÊèêÂèñ
        const domain = new URL(url).hostname.replace('www.', '');
        keywords.push(domain);

        // ‰ªéÂÜÖÂÆπÊèêÂèñÔºàÁÆÄÂçïÂÆûÁé∞Ôºâ
        const contentWords = content
            .replace(/[^\u4e00-\u9fffA-Za-z0-9\s]/g, ' ')
            .split(/\s+/)
            .filter(word => word.length > 2)
            .slice(0, 5);

        keywords.push(...contentWords);

        return keywords.flat().filter(Boolean).join(', ');
    }

    // ÂàõÂª∫ÊµÆÂä®ÈááÈõÜÊåâÈíÆ
    function createFloatingCollectButton() {
        // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®ÊåâÈíÆ
        if (document.getElementById('pe-floating-collect-btn')) {
            return;
        }

        const button = document.createElement('div');
        button.id = 'pe-floating-collect-btn';
        button.innerHTML = `
            <div class="pe-floating-btn-content">
                üìö ÈááÈõÜÂà∞È£û‰π¶
            </div>
        `;

        // Ê∑ªÂä†Ê†∑Âºè
        button.style.cssText = `
            position: fixed;
            top: 50%;
            right: 20px;
            transform: translateY(-50%);
            z-index: 10000;
            background: #007bff;
            color: white;
            padding: 12px 16px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
            transition: all 0.3s ease;
            user-select: none;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        `;

        // ÊÇ¨ÂÅúÊïàÊûú
        button.addEventListener('mouseenter', () => {
            button.style.transform = 'translateY(-50%) scale(1.05)';
            button.style.boxShadow = '0 6px 16px rgba(0, 123, 255, 0.4)';
        });

        button.addEventListener('mouseleave', () => {
            button.style.transform = 'translateY(-50%) scale(1)';
            button.style.boxShadow = '0 4px 12px rgba(0, 123, 255, 0.3)';
        });

        // ÁÇπÂáª‰∫ã‰ª∂
        button.addEventListener('click', collectCurrentPage);

        // Âè≥ÈîÆÊòæÁ§∫ÈÖçÁΩÆ
        button.addEventListener('contextmenu', (e) => {
            e.preventDefault();
            createConfigPanel();
        });

        document.body.appendChild(button);

        // Ê∑ªÂä†ÊèêÁ§∫
        setTimeout(() => {
            if (button.parentElement) {
                const tooltip = document.createElement('div');
                tooltip.style.cssText = `
                    position: fixed;
                    top: 50%;
                    right: 200px;
                    transform: translateY(-50%);
                    background: rgba(0, 0, 0, 0.8);
                    color: white;
                    padding: 8px 12px;
                    border-radius: 6px;
                    font-size: 12px;
                    z-index: 10001;
                    pointer-events: none;
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                `;
                tooltip.textContent = 'Âè≥ÈîÆÊâìÂºÄÈÖçÁΩÆ';
                document.body.appendChild(tooltip);

                setTimeout(() => {
                    if (tooltip.parentElement) {
                        tooltip.remove();
                    }
                }, 3000);
            }
        }, 1000);
    }

    // Ê≥®ÂÜåËèúÂçïÂëΩ‰ª§
    function registerMenuCommands() {
        try {
            // Ê≥®ÂÜåÈááÈõÜÈ°µÈù¢ÂëΩ‰ª§
            GM_registerMenuCommand('üìö ÈááÈõÜÂΩìÂâçÈ°µÈù¢Âà∞È£û‰π¶Áü•ËØÜÂ∫ì', collectCurrentPage);

            // Ê≥®ÂÜåÈÖçÁΩÆÈù¢ÊùøÂëΩ‰ª§
            GM_registerMenuCommand('‚öôÔ∏è ÊâìÂºÄÈÖçÁΩÆÈù¢Êùø', createConfigPanel);

            console.log('ËèúÂçïÂëΩ‰ª§Ê≥®ÂÜåÊàêÂäü');
        } catch (error) {
            console.warn('ËèúÂçïÂëΩ‰ª§Ê≥®ÂÜåÂ§±Ë¥•:', error);
        }
    }

    // ==================== ÂêØÂä®ËÑöÊú¨ ====================

    // ÂàõÂª∫Âè≥‰æßÊÇ¨ÊµÆÂ¢ûÂº∫Á™óÔºà‰∏ìÈó®Áî®‰∫éDeepSeekÁ≠âAIÁΩëÁ´ôÔºâ
    function createFloatingEnhancer() {
        // ÈáçÊñ∞Ê£ÄÊµãÁΩëÁ´ôÁ±ªÂûãÔºåÁ°Æ‰øùÂáÜÁ°Æ
        const siteType = detectSiteType();
        console.log('ÊÇ¨ÊµÆÁ™óÂàõÂª∫Êó∂Ê£ÄÊµãÂà∞ÁöÑÁΩëÁ´ôÁ±ªÂûã:', siteType);

        // Âè™Âú®ÊîØÊåÅÁöÑAIÁΩëÁ´ô‰∏äÊòæÁ§∫
        if (siteType === SiteType.UNKNOWN) {
            console.log('Êú™ËØÜÂà´ÁöÑÁΩëÁ´ôÁ±ªÂûãÔºå‰∏çÂàõÂª∫ÊÇ¨ÊµÆÁ™ó');
            return;
        }

        // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
        if (document.getElementById('pe-floating-enhancer')) {
            return;
        }

        const floatingEnhancer = document.createElement('div');
        floatingEnhancer.id = 'pe-floating-enhancer';
        floatingEnhancer.innerHTML = `
            <div class="pe-floating-btn-content">
                ‚ú® Â¢ûÂº∫ÊèêÁ§∫ËØç
            </div>
        `;

        // Ê∑ªÂä†Ê†∑ÂºèÔºàÂèÇËÄÉÈááÈõÜÊåâÈíÆ‰ΩÜ‰ΩøÁî®‰∏çÂêåÈ¢úËâ≤Âíå‰ΩçÁΩÆÔºâ
        floatingEnhancer.style.cssText = `
            position: fixed;
            top: calc(50% - 70px);
            right: 20px;
            transform: translateY(-50%);
            z-index: 10001;
            background: #28a745;
            color: white;
            padding: 12px 16px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
            transition: all 0.3s ease;
            user-select: none;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        `;

        // ÊÇ¨ÂÅúÊïàÊûú
        floatingEnhancer.addEventListener('mouseenter', () => {
            floatingEnhancer.style.transform = 'translateY(-50%) scale(1.05)';
            floatingEnhancer.style.boxShadow = '0 6px 16px rgba(40, 167, 69, 0.4)';
        });

        floatingEnhancer.addEventListener('mouseleave', () => {
            floatingEnhancer.style.transform = 'translateY(-50%) scale(1)';
            floatingEnhancer.style.boxShadow = '0 4px 12px rgba(40, 167, 69, 0.3)';
        });

        // ÁÇπÂáª‰∫ã‰ª∂
        floatingEnhancer.addEventListener('click', async () => {
            // Â¶ÇÊûúÊ≤°ÊúâÂàùÂßãÂåñÔºåÂ∞ùËØïÂàùÂßãÂåñ
            if (!isInitialized || !inputHandler) {
                console.log('Â∞ùËØïÂàùÂßãÂåñÂ¢ûÂº∫Âô®...');
                await initializeEnhancer();

                // Â¶ÇÊûú‰ªçÁÑ∂Ê≤°ÊúâÂàùÂßãÂåñÊàêÂäüÔºåÊòæÁ§∫ÈîôËØØ
                if (!inputHandler) {
                    setFloatingEnhancerState('error');
                    setTimeout(() => {
                        setFloatingEnhancerState('normal');
                    }, 2000);
                    return;
                }
            }

            // Ë∞ÉÁî®Â¢ûÂº∫Â§ÑÁêÜÂáΩÊï∞
            handleEnhanceClick();
        });

        // Âè≥ÈîÆÊòæÁ§∫ÈÖçÁΩÆ
        floatingEnhancer.addEventListener('contextmenu', (e) => {
            e.preventDefault();
            createConfigPanel();
        });

        document.body.appendChild(floatingEnhancer);
        console.log('‚úÖ ÊÇ¨ÊµÆÂ¢ûÂº∫Á™óÂàõÂª∫ÊàêÂäüÔºÅ');
        console.log('ÊÇ¨ÊµÆÁ™óÂÖÉÁ¥†ID:', floatingEnhancer.id);
        console.log('ÊÇ¨ÊµÆÁ™óÂ∑≤Ê∑ªÂä†Âà∞È°µÈù¢');

        // Ê∑ªÂä†ÊèêÁ§∫
        setTimeout(() => {
            if (floatingEnhancer.parentElement) {
                const tooltip = document.createElement('div');
                tooltip.style.cssText = `
                    position: fixed;
                    top: 50%;
                    right: 90px;
                    transform: translateY(-50%);
                    background: rgba(0, 0, 0, 0.8);
                    color: white;
                    padding: 8px 12px;
                    border-radius: 6px;
                    font-size: 12px;
                    z-index: 10001;
                    pointer-events: none;
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                `;
                tooltip.textContent = 'Âè≥ÈîÆÊâìÂºÄÈÖçÁΩÆ';
                document.body.appendChild(tooltip);

                setTimeout(() => {
                    if (tooltip.parentElement) {
                        tooltip.remove();
                    }
                }, 3000);
            }
        }, 1000);
    }

    // ËÆæÁΩÆÊÇ¨ÊµÆÂ¢ûÂº∫Á™óÁä∂ÊÄÅ
    function setFloatingEnhancerState(state) {
        const floatingEnhancer = document.getElementById('pe-floating-enhancer');
        if (!floatingEnhancer) return;

        switch (state) {
            case 'loading':
                floatingEnhancer.style.background = '#ffc107';
                floatingEnhancer.style.boxShadow = '0 4px 12px rgba(255, 193, 7, 0.3)';
                floatingEnhancer.innerHTML = `
                    <div class="pe-floating-btn-content">
                        ‚è≥ Â¢ûÂº∫‰∏≠...
                    </div>
                `;
                break;
            case 'success':
                floatingEnhancer.style.background = '#28a745';
                floatingEnhancer.style.boxShadow = '0 4px 12px rgba(40, 167, 69, 0.3)';
                floatingEnhancer.innerHTML = `
                    <div class="pe-floating-btn-content">
                        ‚úÖ Â¢ûÂº∫ÂÆåÊàê
                    </div>
                `;
                break;
            case 'error':
                floatingEnhancer.style.background = '#dc3545';
                floatingEnhancer.style.boxShadow = '0 4px 12px rgba(220, 53, 69, 0.3)';
                floatingEnhancer.innerHTML = `
                    <div class="pe-floating-btn-content">
                        ‚ùå Â¢ûÂº∫Â§±Ë¥•
                    </div>
                `;
                break;
            default:
                floatingEnhancer.style.background = '#28a745';
                floatingEnhancer.style.boxShadow = '0 4px 12px rgba(40, 167, 69, 0.3)';
                floatingEnhancer.innerHTML = `
                    <div class="pe-floating-btn-content">
                        ‚ú® Â¢ûÂº∫ÊèêÁ§∫ËØç
                    </div>
                `;
        }
    }

    // ÂêØÂä®ËÑöÊú¨
    init();

    // Ê≥®ÂÜåËèúÂçïÂëΩ‰ª§ÔºàÂú®ÊâÄÊúâÁΩëÁ´ôÈÉΩÂèØÁî®Ôºâ
    registerMenuCommands();

    // ÂàõÂª∫Âè≥‰æßÊÇ¨ÊµÆÂ¢ûÂº∫Á™óÔºàÂú®AIÁΩëÁ´ô‰∏äÊòæÁ§∫Ôºâ
    function initFloatingEnhancer() {
        console.log('üé® ÂºÄÂßãÂàùÂßãÂåñÊÇ¨ÊµÆÂ¢ûÂº∫Á™ó...');
        console.log('üåê ÂΩìÂâçÁΩëÁ´ô:', window.location.hostname);
        console.log('üìç ÂΩìÂâçË∑ØÂæÑ:', window.location.pathname);
        console.log('üîç ÂΩìÂâçÁΩëÁ´ôÁ±ªÂûã:', currentSiteType);
        console.log('‚è∞ È°µÈù¢Âä†ËΩΩÁä∂ÊÄÅ:', document.readyState);

        // Âª∂ËøüÂàõÂª∫ÔºåÁ°Æ‰øùÈ°µÈù¢ÂÆåÂÖ®Âä†ËΩΩ
        setTimeout(() => {
            console.log('‚è≥ 2ÁßíÂª∂ËøüÂêéÂºÄÂßãÂàõÂª∫ÊÇ¨ÊµÆÁ™ó...');
            createFloatingEnhancer();
        }, 2000); // Â¢ûÂä†Âª∂ËøüÊó∂Èó¥Âà∞2Áßí
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initFloatingEnhancer);
    } else {
        initFloatingEnhancer();
    }

    // ÂàõÂª∫ÊµÆÂä®ÈááÈõÜÊåâÈíÆÔºàÁ°Æ‰øùÂú®ÊâÄÊúâÁΩëÁ´ôÈÉΩËÉΩÁúãÂà∞Ôºâ
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', createFloatingCollectButton);
    } else {
        createFloatingCollectButton();
    }

    // Ê∑ªÂä†ÂÖ®Â±ÄÂø´Êç∑ÈîÆÊîØÊåÅÔºàÂú®ÊâÄÊúâÁΩëÁ´ôÈÉΩÂèØÁî®Ôºâ
    document.addEventListener('keydown', (e) => {
        // Ctrl/Cmd + Shift + P ÊâìÂºÄÈÖçÁΩÆÈù¢Êùø
        if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'P') {
            e.preventDefault();
            createConfigPanel();
        }

        // Ctrl/Cmd + Shift + C ÈááÈõÜÂΩìÂâçÈ°µÈù¢
        if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'C') {
            e.preventDefault();
            collectCurrentPage();
        }
    });

    console.log('üöÄ AIÊèêÁ§∫ËØçÂ¢ûÂº∫Âô® - È£û‰π¶Áü•ËØÜÂ∫ìÁâà v1.2.9 Â∑≤Âä†ËΩΩ');
    console.log('üìã ÂäüËÉΩËØ¥Êòé:');
    console.log('  ‚Ä¢ Âú®ÊîØÊåÅÁöÑAIÁΩëÁ´ô‰∏äÂ¢ûÂº∫ÊèêÁ§∫ËØç');
    console.log('  ‚Ä¢ ‰ΩøÁî®È£û‰π¶Â§öÁª¥Ë°®Ê†º‰Ωú‰∏∫Áü•ËØÜÂ∫ì');
    console.log('  ‚Ä¢ ÊîØÊåÅÈ°µÈù¢ÂÜÖÂÆπÈááÈõÜÂà∞Áü•ËØÜÂ∫ì');
    console.log('‚å®Ô∏è  Âø´Êç∑ÈîÆ:');
    console.log('  ‚Ä¢ Ctrl+Shift+P: ÊâìÂºÄÈÖçÁΩÆÈù¢Êùø');
    console.log('  ‚Ä¢ Ctrl+Shift+C: ÈááÈõÜÂΩìÂâçÈ°µÈù¢');
    console.log('  ‚Ä¢ Ctrl+Enter: Âú®ËæìÂÖ•Ê°Ü‰∏≠Ëß¶ÂèëÂ¢ûÂº∫');
    console.log('üîß ÊîπËøõÂÜÖÂÆπ (v1.2.9):');
    console.log('  ‚Ä¢ üßπ ÁÆÄÂåñ‰ª£Á†ÅÈÄªËæëÔºöÁßªÈô§Â§çÊùÇÁöÑÊñáÊú¨Ëé∑ÂèñÂíåÈ™åËØÅÊú∫Âà∂');
    console.log('  ‚Ä¢ üöÄ ‰ºòÂåñÊÄßËÉΩÔºöÂáèÂ∞ë‰∏çÂøÖË¶ÅÁöÑË∞ÉËØïÊó•ÂøóÂíåÈ™åËØÅÊ≠•È™§');
    console.log('  ‚Ä¢ üìã ÁÆÄÂåñÁ≤òË¥¥ÊµÅÁ®ãÔºöÁõ¥Êé•Â§çÂà∂‚ÜíÂÖ®ÈÄâ‚ÜíÂà†Èô§‚ÜíÁ≤òË¥¥');
    console.log('  ‚Ä¢ ‚ú®ÊèêÂçáÁî®Êà∑‰ΩìÈ™åÔºöÂáèÂ∞ëÊéßÂà∂Âè∞Âô™Èü≥Ôºå‰∏ìÊ≥®Ê†∏ÂøÉÂäüËÉΩ');
    console.log('  ‚Ä¢ üéØ ‰øùÊåÅÊ†∏ÂøÉÂäüËÉΩÔºöÁ°Æ‰øùÊñáÊú¨ËÆæÁΩÆÂíåÂ¢ûÂº∫ÂäüËÉΩÊ≠£Â∏∏Â∑•‰Ωú');

    // Ê£ÄÊü•ÊµèËßàÂô®ÂÖºÂÆπÊÄß
    if (typeof GM_xmlhttpRequest === 'undefined') {
        console.warn('‚ö†Ô∏è  Ë≠¶Âëä: GM_xmlhttpRequest ‰∏çÂèØÁî®ÔºåËØ∑Á°Æ‰øù‰ΩøÁî®ÊîØÊåÅÁöÑÁî®Êà∑ËÑöÊú¨ÁÆ°ÁêÜÂô®');
    }

    if (typeof GM_setValue === 'undefined') {
        console.warn('‚ö†Ô∏è  Ë≠¶Âëä: GM_setValue ‰∏çÂèØÁî®ÔºåÈÖçÁΩÆ‰øùÂ≠òÂäüËÉΩÂèØËÉΩÊó†Ê≥ïÊ≠£Â∏∏Â∑•‰Ωú');
    }

})();